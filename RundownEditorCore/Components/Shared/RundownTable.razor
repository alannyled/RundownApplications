@using CommonClassLibrary.DTO
@using RundownEditorCore.Interfaces
@inject IRundownService RundownService
@inject ToastState ToastState
@inject SharedStates SharedStates

<div class="table-responsive">
    <table class="table table-sm table-striped">
        <thead>
            <tr>

                <th>Navn</th>
                <th>Udsendelses dato</th>
                <th>Kontrolrum</th>
                @if (ShowArchived)
                {
                    <th class="text-center">Arkiveret</th>
                }
            </tr>
        </thead>
        <tbody>
            @foreach (var rundown in Rundowns.OrderBy(r => r.BroadcastDate).Reverse())
            {
                if (rundown.BroadcastDate.Date >= SelectedDate.Date)
                {
                    <tr role="button" @onclick="() => OpenThisRundown(rundown.UUID.ToString())">

                        <td class="text-nowrap">@rundown.Name</td>
                        <td class="text-nowrap">@rundown.BroadcastDate.ToLocalTime().ToString("dddd d. MMMM yyyy")</td>
                        <td class="text-nowrap">@rundown.ControlRoomName</td>
                        @if (ShowArchived)
                        {
                            <td class="text-center">
                                <input type="checkbox" checked="@(@IsArchived(rundown.ArchivedDate))" @onchange="() => HandleCheckBoxChange(rundown)" />
                            </td>
                        }


                    </tr>
                }
            }
        </tbody>
    </table>
</div>

@code {
    [Parameter]
    public EventCallback<string> OpenRundown { get; set; }
    [Parameter]
    public List<RundownDTO>? Rundowns { get; set; }
    [Parameter]
    public DateTime SelectedDate { get; set; }
    [Parameter]
    public bool ShowArchived { get; set; } = false;
    //private bool isLoading = true;
   // private string? errorMessage;

    public async Task OpenThisRundown(string uuid)
    {
        await OpenRundown.InvokeAsync(uuid);
    }

    public bool IsArchived(DateTime? archivedDate)
    {
        return archivedDate.HasValue;

    }


    public async Task<RundownDTO> HandleCheckBoxChange(RundownDTO rundown)
    {
        var date = DateTime.Now;
        string message = "";

        if (string.IsNullOrEmpty(rundown.ArchivedDate.ToString()))
        {
            rundown.ArchivedDate = date;
            message = "Rækkefølge er arkiveret";
        }
        else
        {
            rundown.ArchivedDate = null;
            message = "Rækkefølge er aktiveret igen";
        }

        rundown = await RundownService.UpdateRundownAsync(rundown.UUID, rundown);

        if (ToastState.Show)
            ToastState.Close();
        ToastState.FireToast(message, "text-bg-success");
        return rundown;
    }





}
