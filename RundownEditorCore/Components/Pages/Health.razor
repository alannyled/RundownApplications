@page "/status"
@inject RundownEditorCore.States.SharedStates SharedStates

@attribute [Authorize(Roles = "Administrator")]
<PageTitle>Online Status</PageTitle>

<div class="container-fluid" style="max-width:1920px">
    <div class="row">
        <div class="col-xl-4">
            <h3>Online Status</h3>
            @foreach (var db in SharedStates.OnlineStatus)
            {
                <ul class="list-group list-group-horizontal mb-1">
                    <li class="list-group-item w-75 fw-bold">@(db.Key)</li>
                    <li class="list-group-item w-25 text-end @(db.Value ? "list-group-item-success" : "list-group-item-danger")">@(db.Value ? "Online" : "Offline")</li>
                </ul>
            }
        </div>
        <div class="col-xl-8">
            <a class="nav-link" href="log" target="_blank"><span style="font-size: 1.75rem;">Log </span><small>(klik for at åbne på ny side)</small></a>
            <table class="table table-striped table-bordered table-sm">
                <thead>
                    <tr>
                        <th style="width:8%">Time</th>
                        <th>Category</th>
                        <th>Service</th>
                        <th>Message</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var log in InMemoryLogger.GetLogs().Reverse())
                    {
                        <tr class="font-monospace" style="font-size:12px">@((MarkupString)log)</tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

@code {
    protected override void OnInitialized()
    {
        SharedStates.OnChange += HandleStateChange;
    }

    private void HandleStateChange(SharedStates.StateAction action)
    {
        if (action == SharedStates.StateAction.OnlineStatusUpdated)
        {
            InvokeAsync(StateHasChanged); 
        }
    }

    public void Dispose()
    {
        SharedStates.OnChange -= HandleStateChange;
    }
}
