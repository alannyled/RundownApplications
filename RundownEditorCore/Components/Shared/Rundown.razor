@using CommonClassLibrary.DTO
@inject IRundownService RundownService
@inject IKafkaService KafkaService
@inject IMessageBuilderService MessageBuilderService
@inject RundownState RundownState
@inject SharedStates SharedStates
@inject ToastState ToastState
@inject DetailLockState DetailLockState
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ILogger<RundownService> Logger
@using CommonClassLibrary.Enum;

@if (!string.IsNullOrEmpty(RundownState.Rundown.Name))
{
    <ul class="nav nav-tabs mb-2">
        <TabItem MenuItem="@RundownState.Rundown.Name" ActiveTab="@activeTab" SelectTab="SelectTab" />
        @foreach (var item in menuTabs)
        {
            @item.Content
        }
    </ul>
}
<div class="tab-content">

    <TabPaneRundown ActiveTab="@activeTab"
                    OpenTabPane="OpenTabPane" />

    @foreach (var tab in tabPanes)
    {
        @tab.Content
    }
</div>

@code {
    private string activeTab = string.Empty;
    private string openStoryId = string.Empty;

    private List<TabFragment> menuTabs = new();
    private List<TabFragment> tabPanes = new();

    protected override void OnInitialized()
    {
        activeTab = RundownState.Rundown.Name ?? string.Empty;
        RundownState.OnChange += HandleRundownStateChange;
    }

    /// <summary>
    /// Rydder alle tabs og tabpanes, hvis der skiftes til en anden Rundown
    /// </summary>
    private string previousRundownName = string.Empty;

    private async void HandleRundownStateChange(RundownState.StateAction action)
    {
        if (action != RundownState.StateAction.RundownUpdated) return;

        bool activeTabExists = menuTabs.Any(tab => tab.Name == activeTab);
        bool isNewRundown = RundownState.Rundown.Name != previousRundownName;

        if (activeTabExists && !isNewRundown)
        {
            previousRundownName = RundownState.Rundown.Name;
            return;
        }
        activeTab = RundownState.Rundown.Name ?? "Unknown";
        previousRundownName = RundownState.Rundown.Name ?? "Unknown";
        menuTabs.Clear();
        tabPanes.Clear();
        await InvokeAsync(StateHasChanged);        
    }

    /// <summary>
    /// Sætter den valgte tab til den aktive, så visning i UI sker
    /// </summary>
    private void SelectTab(string tabName)
    {
        activeTab = tabName;
    }
    /// <summary>
    /// Viser en TabPane, hvis den findes. Ellers kaldes rendering af en ny TabPane
    /// </summary>
    private async void OpenTabPane(RundownStoryDTO story)
    {
        if(story.Name == null) return;
        activeTab = story.Name;
        RundownState.SelectedStory(story);

        openStoryId = story.UUID.ToString();

        if (!menuTabs.Any(tab => tab.StoryId == story.UUID.ToString()))
        {
            AddMenuTab(story.UUID.ToString());
        }
        await InvokeAsync(StateHasChanged);
    }
    /// <summary>
    /// Renderer en Tab til menuen
    /// </summary>
    private void AddMenuTab(string storyId)
    {
        string tabName = activeTab;
        var newChild = new RenderFragment(builder =>
        {
            builder.OpenComponent<TabItem>(0);
            builder.SetKey(storyId);
            builder.AddAttribute(1, "MenuItem", tabName);
            builder.AddAttribute(2, "StoryId", storyId);
            builder.AddAttribute(3, "ActiveTab", activeTab);
            builder.AddAttribute(4, "SelectTab", EventCallback.Factory.Create<string>(this, SelectTab));
            builder.AddAttribute(5, "CloseTab", EventCallback.Factory.Create<string>(this, RemoveTabPane));
            builder.CloseComponent();
        });

        menuTabs.Add(new TabFragment
            {
                Name = tabName,
                StoryId = openStoryId,
                Content = newChild
            });

        AddTabPane(storyId);
    }
    /// <summary>
    /// Renderer en ny TabPane
    /// </summary>
    private void AddTabPane(string storyId)
    {
        string tabName = activeTab;
        var newChild = new RenderFragment(builder =>
        {
            builder.OpenComponent<TabPaneRundownStory>(0);
            builder.SetKey(storyId);
            builder.AddAttribute(1, "ActiveTab", activeTab);
            builder.AddAttribute(2, "StoryId", storyId);
            builder.AddAttribute(3, "Name", tabName);
            builder.AddAttribute(4, "OnRemove", EventCallback.Factory.Create<string>(this, RemoveTabPane));
            builder.CloseComponent();
        });

        tabPanes.Add(new TabFragment
            {
                Name = tabName,
                StoryId = storyId,
                Content = newChild
            });

    }
    /// <summary>
    /// Fjerne en TabPane, når der klikkes på luk-knappen
    /// </summary>
    private async Task RemoveTabPane(string storyId)
    {
        var tabToRemove = tabPanes.FirstOrDefault(tab => tab.StoryId == storyId);
        if (tabToRemove?.Name != null)
        {
            tabPanes.Remove(tabToRemove);
            await RemoveTab(tabToRemove);
            
        }
    }
    /// <summary>
    /// Fjerne en Tab fra menuen, når der klikkes på luk-knappen
    /// </summary>
    private async Task RemoveTab(TabFragment removedTab)
    {
        var tabToRemove = menuTabs.FirstOrDefault(tab => tab.Name == removedTab.Name);
        if (tabToRemove != null)
        {
            menuTabs.Remove(tabToRemove);
            activeTab = menuTabs.FirstOrDefault()?.Name ?? RundownState.Rundown.Name;
            await UnlockDetailsOnTabPaneRemove(removedTab.StoryId);
            await InvokeAsync(StateHasChanged);
        }
    }

    /// <summary>
    /// Oplåse evt. låste details, når tabben fjernes
    /// </summary>
    private async Task UnlockDetailsOnTabPaneRemove(string storyId)
    {
        var rundownStory = RundownState.Rundown.Stories.FirstOrDefault(story => story.UUID == Guid.Parse(storyId));
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var currentUserName = authState.User?.Identity?.Name ?? "Ukendt bruger";

        foreach (var detail in rundownStory?.Details ?? Enumerable.Empty<DetailDTO>())
        {
            if (DetailLockState.IsLocked(detail.UUID.ToString(), out var lockedByUser) && lockedByUser == currentUserName)
            {
                DetailLockState.SetLockState(detail, false, currentUserName);

                var message = MessageBuilderService.BuildDetailLockMessage(detail, false, currentUserName);
                string topic = MessageTopic.DetailLock.ToKafkaTopic();
                KafkaService.SendMessage(topic, message);
            }
        }
    }
    /// <summary>
    /// Model til listen over tabs og tabpanes, hvorfra der tilføjes og fjernes elementer
    /// </summary>
    public class TabFragment
    {
        public string? Name { get; set; }
        public string? StoryId { get; set; }
        public RenderFragment? Content { get; set; }
    }


}


