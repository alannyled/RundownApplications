@using RundownEditorCore.Components.Shared

<div class="modal fade show" style='display:@(showDialog ? "block" : "none")' tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Nyt rækkefølge objekt</h5>
                <button type="button" class="btn-close" @onclick="CloseDialog"></button>
            </div>
            <div class="modal-body">
                <form>
                    <div class="mb-3">
                        <label for="objectname" class="form-label">Navn</label>
                        <input type="text" class="form-control form-control-sm" id="objectname" @bind="ObjectName">
                    </div>
                    <div class="mb-3">
                        <label for="duration" class="form-label">Planlagt længde</label>
                        <input type="text" class="form-control form-control-sm" id="duration" @bind="Duration">
                    </div>
                    <div class="mb-3">
                        <label for="categori" class="form-label">Kategori</label>
                        <input type="text" class="form-control form-control-sm" id="categori" @bind="Category">
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button class="btn btn-sm btn-primary" @onclick="CloseDialog">Fortryd</button>
                <button class="btn btn-sm btn-success" @onclick="SaveNewObject">Gem</button>
            </div>
        </div>
    </div>
</div>

<ul class="nav nav-tabs mb-2">
    <TabItem MenuItem="Rundown" ActiveTab="@activeTab" SelectTab="SelectTab" />
    @foreach (var item in menuTabs)
    {
        @item.Content
    }
</ul>
<div class="tab-content">
    <TabPaneRundown Name="FakeNews" ActiveTab="@activeTab" CallBack="OpenRundownObject" />
    @foreach (var tab in tabPanes)
    {
        @tab.Content
    }
</div>

@code {

    private string ObjectName { get; set; } = "Unknown";
    private string Duration { get; set; } = "00:00:00";
    private string Category { get; set; } = string.Empty;

    private bool showDialog = false;
    private string activeTab = "Rundown";

    private List<TabFragment> menuTabs = new();
    private List<TabFragment> tabPanes = new();

    private void SelectTab(string tabName)
    {
        activeTab = tabName;
    }

    private void OpenRundownObject()
    {
        Console.WriteLine("INVOKED");
        showDialog = true;
    }

    private void CloseDialog()
    {
        showDialog = false;
    }

    private void SaveNewObject()
    {
        showDialog = false;
        activeTab = ObjectName;
        AddMenuTab();
        
    }

    private void AddMenuTab()
    {
        string tabName = ObjectName;
        var newChild = new RenderFragment(builder =>
        {
            builder.OpenComponent<TabItem>(0); // Opretter TabItem-komponent
            builder.AddAttribute(1, "MenuItem", tabName);
            builder.AddAttribute(2, "ActiveTab", activeTab);
            builder.AddAttribute(3, "SelectTab", EventCallback.Factory.Create<string>(this, SelectTab));
            builder.CloseComponent();
        });

        menuTabs.Add(new TabFragment
            {
                Name = tabName,
                Content = newChild
            });

        AddTabPane();
    }
    private void AddTabPane()
    {
        string tabName = ObjectName;
        var newChild = new RenderFragment(builder =>
        {
            builder.OpenComponent<TabPaneRundownObject>(0);
            builder.AddAttribute(1, "Name", tabName);
            builder.AddAttribute(2, "ActiveTab", activeTab);
            builder.AddAttribute(3, "OnRemove", EventCallback.Factory.Create<string>(this, RemoveTabPane));
            builder.CloseComponent();
        });

        //tabPanes.Add(newChild);
        tabPanes.Add(new TabFragment
            {
                Name = tabName,
                Content = newChild
            });
        
        ObjectName = "Unknown";
        Duration = "00:00:00";
        Category = string.Empty;
    }

    private void RemoveTabPane(string tabName)
    {
        // Find og fjern fanen baseret på dens navn
        var tabToRemove = tabPanes.FirstOrDefault(tab => tab.Name == tabName);
        if (tabToRemove != null)
        {
            tabPanes.Remove(tabToRemove);
            RemoveTab(tabName);
        }
    }

    private void RemoveTab(string tabName)
    {
        // Find og fjern fanen baseret på dens navn
        var tabToRemove = menuTabs.FirstOrDefault(tab => tab.Name == tabName);
        if (tabToRemove != null)
        {
            menuTabs.Remove(tabToRemove);
            activeTab = "Rundown";
            StateHasChanged(); 
        }
    }


    public class TabFragment
    {
        public string Name { get; set; } // Fanens navn
        public RenderFragment Content { get; set; } // Fanens indhold (RenderFragment)
    }


}
