@page "/rundowns"
@inject IRundownService RundownService
@inject SharedStates SharedStates
@inject ToastState ToastState

<PageTitle>Rækkefølger</PageTitle>
<Toast></Toast>
<div class="container-fluid" style="max-width:1600px">
    <RundownTable Rundowns="AllRundowns" ShowArchived="true" />
</div>

@code{

    private List<RundownDTO> AllRundowns = new();

    protected override async Task OnInitializedAsync()
    {
        if (SharedStates.AllRundowns.Count == 0)
        {
            AllRundowns = await RundownService.GetRundownsAsync();
            SharedStates.SharedAllRundowns(AllRundowns);
        }
        else
        {
            AllRundowns = SharedStates.AllRundowns;
        }
        SharedStates.OnChange += HandleSharedStateChange;
    }

    private async void HandleSharedStateChange(SharedStates.StateAction action)
    {
        if (action == SharedStates.StateAction.AllRundownsUpdated)
        {
            AllRundowns = new List<RundownDTO>(SharedStates.AllRundowns);
            await InvokeAsync(StateHasChanged);
        }

        if (action == SharedStates.StateAction.Error)
        {
            string message = "";
            switch (SharedStates.Error.Action)
            {
                case "retry":
                    message = $"Data kunne ikke hentes {SharedStates.Error.Count}. gang.<br>Forsøger igen om {SharedStates.Error.Time} sekunder";
                    break;
                default:
                    message = "Der skete en alvorlig fejl. En eller flere services er ikke tilgængelige";
                    break;
            }
            await InvokeAsync(() =>
            {
                ToastState.FireToast(message, "text-bg-warning");
            });
        }
    }

    public void Dispose()
    {
        // Fjern abonnementet for at undgå memory leaks
        SharedStates.OnChange -= HandleSharedStateChange;
    }
}