@using RundownEditorCore.Components.Shared
@using RundownEditorCore.DTO
@using RundownEditorCore.Interfaces
@inject IRundownService RundownService

<Modal ShowDialog="@showDialog" SaveChanges="SaveNewObject" ShowDialogChanged="@((value) => showDialog = value)" Title="Nyt rækkefølge objekt">
    <RundownObjectForm ObjectName="@ObjectName"
                       Duration="@Duration"
                       Category="@Category"
                       Categories="@Categories"
                       ObjectNameChanged="@(value => ObjectName = value)"
                       DurationChanged="@(value => Duration = value)"
                       CategoryChanged="@(value => Category = value)">
    </RundownObjectForm>
</Modal>


@if (SelectedRundown.Name != string.Empty)
{
<ul class="nav nav-tabs mb-2">
        <TabItem MenuItem="@SelectedRundown.Name" ActiveTab="@activeTab" SelectTab="SelectTab" />
    @foreach (var item in menuTabs)
    {
        @item.Content
    }
</ul>
}
<div class="tab-content">

    <TabPaneRundown 
        SelectedRundown="SelectedRundown" 
        ControlRooms="ControlRooms" 
        ActiveTab="@activeTab" 
        UpdateRundownList="ControlRoomChange" 
        ShowDialog="OpenRundownObject" 
        OpenTabPane="OpenTabPane" 
        CurrentObjects="RundownObjects" />

    @foreach (var tab in tabPanes)
    {
        @tab.Content
    }
</div>

@code {
    [Parameter]
    public RundownDTO SelectedRundown { get; set; }
    [Parameter]
    public List<ControlRoomDTO> ControlRooms { get; set; }
    [Parameter]
    public EventCallback UpdateRundownList { get; set; } 

    private string ObjectName { get; set; } = string.Empty;
    private string Duration { get; set; } = "00:00:00";
    private string Category { get; set; } = string.Empty;

    private List<string> Categories = new List<string> { "TVA Intro", "Indslag", "Indslag VO", "Kamera Tekst" };

    private bool showDialog = false;
    private string activeTab = string.Empty;

    private List<TabFragment> menuTabs = new();
    private List<TabFragment> tabPanes = new();

    public List<RundownObjects> RundownObjects { get; set; } = new List<RundownObjects>();

    protected override void OnParametersSet()
    {
        if (activeTab != SelectedRundown.Name && !string.IsNullOrEmpty(SelectedRundown.Name))
        {
            activeTab = SelectedRundown.Name;
            RundownObjects = []; // det her skal så være den reelle liste af objects og ikke en tom liste
            menuTabs = [];
            tabPanes = [];
        }
    }

    private async Task ControlRoomChange()
    {
        await UpdateRundownList.InvokeAsync();
    }

    private Task<int> RandomNumber()
    {
        return Task.FromResult(new Random().Next(10000000, 100000000));
    }

    private void SelectTab(string tabName)
    {
        activeTab = tabName;
    }

    private void OpenRundownObject()
    {
        showDialog = true;
    }

    private void CloseDialog()
    {
        showDialog = false;
    }

    private void OpenTabPane(string tabName)
    {
        activeTab = tabName;

        if (!menuTabs.Any(tab => tab.Name == tabName)) 
        {
            ObjectName = tabName;
            AddMenuTab();
        }
    }


    private async Task SaveNewObject()
    {
        showDialog = false;
        if (string.IsNullOrEmpty(ObjectName))
        {
            int random = RandomNumber().Result;
            ObjectName = $"Unknown-{random}";
        }
        activeTab = ObjectName;
        AddObjectToRundown();
        AddMenuTab();

        var newRundownItem = new RundownItemDTO
            {
                UUID = Guid.NewGuid(),
                RundownId = SelectedRundown.Uuid, 
                Name = ObjectName,
                Duration = Duration,
                Order = RundownObjects.Count // Dette kan være den aktuelle rækkefølge?
            };
        
        await RundownService.AddItemToRundownAsync(SelectedRundown.Uuid.ToString(), newRundownItem);

        // nulstil alle felter
        ObjectName = string.Empty;
        Duration = "00:00:00";
        Category = string.Empty;

    }

    private void AddObjectToRundown()
    {
        RundownObjects.Add(new RundownObjects
        {
            Id = Guid.NewGuid().ToString(),
            Name = ObjectName,
            Duration = Duration,
            Category = Category
        });
    }

    private void AddMenuTab()
    {        
        string tabName = ObjectName;
        var newChild = new RenderFragment(builder =>
        {
            builder.OpenComponent<TabItem>(0);
            builder.AddAttribute(1, "MenuItem", tabName);
            builder.AddAttribute(2, "ActiveTab", activeTab);
            builder.AddAttribute(3, "SelectTab", EventCallback.Factory.Create<string>(this, SelectTab));
            builder.CloseComponent();
        });

        menuTabs.Add(new TabFragment
            {
                Name = tabName,
                Content = newChild
            });

        AddTabPane();
    }
    private void AddTabPane()
    {
        string tabName = ObjectName;
        
        var newChild = new RenderFragment(builder =>
        {
            builder.OpenComponent<TabPaneRundownObject>(0);
            builder.AddAttribute(1, "Name", tabName);
            builder.AddAttribute(2, "ActiveTab", activeTab);
            builder.AddAttribute(3, "OnRemove", EventCallback.Factory.Create<string>(this, RemoveTabPane));
            builder.CloseComponent();
        });

        tabPanes.Add(new TabFragment
            {
                Name = tabName,
                Content = newChild
            });
        
    }

    private void RemoveTabPane(string tabName)
    {
        var tabToRemove = tabPanes.FirstOrDefault(tab => tab.Name == tabName);
        if (tabToRemove != null)
        {
            tabPanes.Remove(tabToRemove);
            RemoveTab(tabName);
        }
    }

    private void RemoveTab(string tabName)
    {
        var tabToRemove = menuTabs.FirstOrDefault(tab => tab.Name == tabName);
        if (tabToRemove != null)
        {
            menuTabs.Remove(tabToRemove);
            activeTab = SelectedRundown.Name;
            StateHasChanged(); 
        }
    }


    public class TabFragment
    {
        public string? Name { get; set; } 
        public RenderFragment? Content { get; set; }
    }


}


@*
    <div class="modal fade show" style='display:@(showDialog ? "block" : "none")' tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Nyt rækkefølge objekt</h5>
                <button type="button" class="btn-close" @onclick="CloseDialog"></button>
            </div>
            <div class="modal-body">
                <form>
                    <div class="mb-3">
                        <label for="objectname" class="form-label">Navn</label>
                        <input type="text" class="form-control form-control-sm" id="objectname" @bind="ObjectName">
                    </div>
                    <div class="mb-3">
                        <label for="duration" class="form-label">Planlagt længde</label>
                        <input type="time" step="1" class="form-control form-control-sm" id="duration" @bind="Duration">
                    </div>
                    <div class="mb-3">
                        <label for="category" class="form-label">Skabelon</label>
                        <select class="form-control form-control-sm" id="category" @bind="Category">
                            <option value="">Vælg en Skabelon</option>
                            @foreach (var category in Categories)
                            {
                                <option value="@category">@category</option>
                            }
                        </select>
                    </div>
                </form>

            </div>
            <div class="modal-footer">
                <button class="btn btn-sm btn-primary" @onclick="CloseDialog">Fortryd</button>
                <button class="btn btn-sm btn-success" @onclick="SaveNewObject">Gem</button>
            </div>
        </div>
    </div>
</div>
*@