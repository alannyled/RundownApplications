@using CommonClassLibrary.DTO
@inject IRundownService RundownService
@inject RundownState RundownState

@if (!string.IsNullOrEmpty(RundownState.Rundown.Name))
{
    <ul class="nav nav-tabs mb-2">
        <TabItem MenuItem="@RundownState.Rundown.Name" ActiveTab="@activeTab" SelectTab="SelectTab" />
        @foreach (var item in menuTabs)
        {
            @item.Content
        }
    </ul>
}
<div class="tab-content">

    <TabPaneRundown ControlRooms="ControlRooms"
                    ActiveTab="@activeTab"
                    OpenTabPane="OpenTabPane" />

    @foreach (var tab in tabPanes)
    {
        @tab.Content
    }
</div>

@code {
    [Parameter]
    public List<ControlRoomDTO> ControlRooms { get; set; }

    private string activeTab = string.Empty;
    private string openItemId = string.Empty;

    private List<TabFragment> menuTabs = new();
    private List<TabFragment> tabPanes = new();

    protected override void OnInitialized()
    {
        RundownState.OnChange += HandleRundownStateChange;
    }

    private void HandleRundownStateChange()
    {
        if (activeTab != RundownState.Item.Name && activeTab != RundownState.Rundown.Name)
        {
            activeTab = RundownState.Rundown.Name ?? "Unknown";
            menuTabs = [];
            tabPanes = [];
        }
    }
    private void SelectTab(string tabName)
    {
        activeTab = tabName;
    }   
    /// <summary>
    /// Viser en TabPane, hvis den findes. Ellers kaldes rendering af en ny TabPane
    /// </summary>
    private void OpenTabPane(RundownItemDTO item)
    {
        RundownState.SelectedItem(item);
        activeTab = item.Name;
        openItemId = item.UUID.ToString();

        if (!menuTabs.Any(tab => tab.ItemId == item.UUID.ToString()))
        {
            AddMenuTab(item.UUID.ToString());
        }
    }
    /// <summary>
    /// Renderer en Tab til menuen
    /// </summary>
    private void AddMenuTab( string itemId)
    {
        string tabName = activeTab;
        var newChild = new RenderFragment(builder =>
        {
            builder.OpenComponent<TabItem>(0);
            builder.AddAttribute(1, "MenuItem", tabName);
            builder.AddAttribute(2, "ItemId", itemId);
            builder.AddAttribute(3, "ActiveTab", activeTab);
            builder.AddAttribute(4, "SelectTab", EventCallback.Factory.Create<string>(this, SelectTab));
            builder.AddAttribute(5, "CloseTab", EventCallback.Factory.Create<string>(this, RemoveTabPane));
            builder.CloseComponent();
        });

        menuTabs.Add(new TabFragment
            {
                Name = tabName,
                ItemId = openItemId,
                Content = newChild
            });

        AddTabPane(itemId);
    }
    /// <summary>
    /// Renderer en ny TabPane
    /// </summary>
    private void AddTabPane(string itemId)
    {
        string tabName = activeTab;
        var newChild = new RenderFragment(builder =>
        {
            builder.OpenComponent<TabPaneRundownItem>(0);
            builder.SetKey(itemId);
            builder.AddAttribute(1, "ActiveTab", activeTab);
            builder.AddAttribute(2, "ItemId", itemId);
            builder.AddAttribute(3, "Name", tabName);
            builder.AddAttribute(4, "OnRemove", EventCallback.Factory.Create<string>(this, RemoveTabPane));
            builder.CloseComponent();
        });

        tabPanes.Add(new TabFragment
            {
                Name = tabName,
                ItemId = itemId,
                Content = newChild
            });

    }
    /// <summary>
    /// Fjerne en TabPane, når der klikkes på luk-knappen
    /// </summary>
    private void RemoveTabPane(string itemId)
    {
        var tabToRemove = tabPanes.FirstOrDefault(tab => tab.ItemId == itemId);
        if (tabToRemove != null)
        {
            tabPanes.Remove(tabToRemove);
            Console.WriteLine("TabPane removed: " + itemId + " - " +tabToRemove.ItemId);
            RemoveTab(tabToRemove.Name);
        }
    }
    /// <summary>
    /// Fjerne en Tab fra menuen, når der klikkes på luk-knappen
    /// </summary>
    private void RemoveTab(string tabName)
    {
        var tabToRemove = menuTabs.FirstOrDefault(tab => tab.Name == tabName);
        if (tabToRemove != null)
        {
            menuTabs.Remove(tabToRemove);
            activeTab = menuTabs.FirstOrDefault()?.Name ?? RundownState.Rundown.Name;
            StateHasChanged();
        }
    }
    /// <summary>
    /// Model til listen over tabs og tabpanes, hvorfra der tilføjes og fjernes elementer
    /// </summary>
    public class TabFragment
    {
        public string? Name { get; set; }
        public string? ItemId { get; set; }
        public RenderFragment? Content { get; set; }
    }


}


