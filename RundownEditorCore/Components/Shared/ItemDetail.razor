@inject IRundownService RundownService
@inject ApplicationDbContext ApplicationDbContext
@inject IKafkaService KafkaService
@inject IMessageBuilderService MessageBuilderService
@inject RundownState RundownState
@inject SharedStates SharedStates
@inject DetailLockState DetailLockState
@inject AuthenticationStateProvider AuthenticationStateProvider
@using Microsoft.EntityFrameworkCore
@using CommonClassLibrary.Enum;
@using CommonClassLibrary.DTO;

<div>
    <div class="card mb-3 d-inline-block
        @(locked && lockedByUser != userName ? "border border-3 border-danger" : "")
        @(active ? "border border-3 border-success": "")">
        <div class="card-header d-flex justify-content-between @color">
            @Detail.Title<i class="ms-5 bi @icon"></i>
        </div>
        <div class="p-0">
       
            <div class="input-group">
                <span class="input-group-text rounded-0 @color">Duration</span>
                <input id="duration" type="time" class="form-control form-control-sm" step="1" value="@Detail.Duration" @oninput="HandleDurationInput" disabled="@(!active)">
     
                <button class="btn rounded-0 @color" type="button" disabled="@(locked && lockedByUser != userName)" @onclick="() => ActivateInput()">
                    <i class="bi @(!active ? "bi-pencil-fill" : "bi-floppy-fill")"></i>
                </button>
            </div>
        </div>
        <div class="card-body p-0">
            <p class="@(locked && lockedByUser != userName ? "bg-danger text-white text-center px-5 py-2 m-0" : "d-none")">@(locked && lockedByUser != userName ? $"Låst af {lockedByUser}" : "")</p>
            <div class="input-group">
                @if(Detail.Type == "Video")
                {
                    <input class="form-control rounded-0 rounded-bottom" type="text" value="@Detail.VideoPath" readonly style="width:@($"{Detail.VideoPath.Length}ch")">
                }
                else
                {
                <textarea class="form-control rounded-0 rounded-bottom"
                    rows="@CalculateRows()"
                    cols="@(Math.Ceiling((double)content.Count()))"
                    @bind="content"
                    disabled="@(!active)" 
                    style="resize: both;">
                    @content
                </textarea>
                }
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public DetailDTO Detail { get; set; } = new();
    public string? icon { get; set; }
    public string? color { get; set; }
    public string? content { get; set; }
    public bool active = true;
    public bool locked = false;
    public string userName = "";
    public string lockedByUser = "";
    public string lockedClass = "";
    public Guid updatedDetailUuid = Guid.Empty;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        userName = user.Identity.Name ?? "Ukendt bruger";

        icon = Detail.Type switch
        {
            "Kamera" => "bi-camera-video",
            "Teleprompter" => "bi-card-text",
            "Grafik" => "bi-palette",
            "Video" => "bi-film",
            "Voiceover" => "bi-badge-vo",
            "Kommentar" => "bi-chat-right-text",
            _ => "bi-x-square"
        };
        color = Detail.Type switch
        {
            "Kamera" => "text-bg-success",
            "Teleprompter" => "bg-danger-subtle",
            "Grafik" => "bg-warning-subtle",
            "Video" => "bg-primary-subtle",
            "Voiceover" => "bg-success-subtle",
            "Kommentar" => "bg-info-subtle",
            _ => "bg-secondary-subtle"
        };

        content = SetContent();
        DetailLockState.OnLockStateChanged += HandleLockStateChanged;
        locked = DetailLockState.IsLocked(Detail.UUID.ToString(), out lockedByUser);
        active = locked && lockedByUser == userName;

        RundownState.OnChange += HandleRundownStateChange;
    }

    private void HandleRundownStateChange(RundownState.StateAction action)
    {       
        if (Detail != null && action == RundownState.StateAction.ItemUpdated)
        {
            var updatedDetail = RundownState.Item.Details.FirstOrDefault(d => d.UUID == Detail.UUID);
            if (updatedDetail != null && updatedDetail.UUID == updatedDetailUuid)
            {
                Detail = updatedDetail;
                content = SetContent();
                updatedDetailUuid = Guid.Empty;
            }
        }        
        InvokeAsync(StateHasChanged); // muligvis overflødig, fordi @bind gør det samme?
    }
    private void HandleDurationInput(ChangeEventArgs e)
    {
        Detail.Duration = e.Value?.ToString();
    }
    // private void HandleContentInput(ChangeEventArgs e)
    // {
    //     content = e.Value?.ToString();
    // }

    public async Task ActivateInput()
    {
        var saveChanges = active;

        if (saveChanges)
        {
            await SaveChanges();            
        }

        SetLockOnElement();      

    }

    private async Task SaveChanges()
    { 
        updatedDetailUuid = Detail.UUID;
        var contentType = Detail.Type switch
        {
            "Teleprompter" => Detail.PrompterText = content,
            "Grafik" => Detail.GraphicId = content,
            "Video" => Detail.VideoPath = content,
            "Voiceover" => Detail.PrompterText = content,
            "Kommentar" => Detail.Comment = content,
            _ => "Noget gik helt galt her??!!"
        };

        var updatedRundown = await RundownService.UpdateDetailAsync(RundownState.Rundown.UUID, Detail);

        var rundown = SharedStates.AllRundowns.Find(r => r.UUID == updatedRundown.UUID);
        if (rundown == null) return;
        
        var item = rundown?.Items.FirstOrDefault(i => i.UUID == Detail.ItemId);
        if (item == null) return;

        var detailIndex = item.Details.FindIndex(d => d.UUID == Detail.UUID);
        if (detailIndex != -1)
        {
            item.Details[detailIndex] = Detail;
        }
        SharedStates.SharedAllRundowns(SharedStates.AllRundowns);
    }

    /// <summary>
    /// Sætter lås på et element, hvis det redigeres, så andre ikke kan redigere det
    /// </summary>
    private void SetLockOnElement()
    {
        active = !active;
        locked = active && lockedByUser != userName;
        if (locked)
        {
            DetailLockState.SetLockState(Detail, true, userName);
        }
        else
        {
            DetailLockState.SetLockState(Detail, false, userName);
        }
        var message = MessageBuilderService.BuildDetailLockMessage(Detail, locked, userName);
        string topic = MessageTopic.DetailLock.ToKafkaTopic();
        KafkaService.SendMessage(topic, message);
    }

    private string SetContent()
    {
        return Detail.Type switch
        {
            "Kamera" => "Kamera",
            "Teleprompter" => Detail.PrompterText ?? "Prompter text not found",
            "Grafik" => Detail.GraphicId ?? "Graphic element not found",
            "Video" => Detail.VideoPath ?? "Videopath not found",
            "Voiceover" => Detail.PrompterText ?? "Voiceover text not found",
            "Kommentar" => Detail.Comment ?? "Comment not found",
            _ => "Ukendt"
        };
    }

    private void HandleLockStateChanged(DetailDTO detail, bool isLocked, string userName)
    {
        if (detail.UUID == Detail.UUID)
        {
            locked = isLocked;
            Detail = detail;
            lockedByUser = isLocked ? userName : "";
            content = SetContent();
            InvokeAsync(StateHasChanged);
        }
    }

    private int CalculateRows()
    {
        var lineCount = content.Split('\n').Length;
        var additionalRows = Math.Ceiling((double)content.Length / 150);
        // Antal rækker (mindst 1 + antal linjeskift + ekstra rækker)
        return Math.Max(1, lineCount + (int)additionalRows);
    }

    public void Dispose()
    {
        DetailLockState.OnLockStateChanged -= HandleLockStateChanged;
    }
}
