@page "/"
@using System.Text.Json;
@using RundownEditorCore.Components.Shared
@using RundownEditorCore.DTO
@using RundownEditorCore.Interfaces
@using RundownEditorCore.Data
@inject IRundownService RundownService
@inject IControlRoomService ControlRoomService
@inject ITemplateService TemplateService
@inject IHttpClientFactory ClientFactory
@using Microsoft.AspNetCore.Authorization
@* @using Microsoft.AspNetCore.Identity
@using System.Security.Claims
@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider

@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider *@

@attribute [Authorize(Roles = "User,Administrator")]

<PageTitle>Home</PageTitle>


<div class="container-fluid full-height">
    <div class="row h-100">
        <div class="col-xl-3 h-100">
            <ul class="nav nav-tabs mb-2">
                <TabItem MenuItem="Media" ActiveTab="@activeTab" SelectTab="SelectTab" />
                <TabItem MenuItem="Rundowns" ActiveTab="@activeTab" SelectTab="SelectTab" />                
                <TabItem MenuItem="Templates" ActiveTab="@activeTab" SelectTab="SelectTab" />
            </ul>
            <div class="tab-content">
                <div class="tab-pane @(activeTab == "Templates" ? "show active" : "fade")">
                    <div class="card card-height-100 mb-2">

                        <div class="card-body">
                            <h5 class="card-title">Templates</h5>
                            <Calendar ReturnSelectedDate="SetSelectedDate" />
                            <hr />
                            <TemplatesTable Templates="AllTemplates" />
                        </div>
                    </div>
                </div>
                <div class="tab-pane @(activeTab == "Media" ? "show active" : "fade")">
                    <div class="card card-height-100 mb-2">

                        <div class="card-body">
                            <h5 class="card-title">Media browser</h5>
                            <p class="card-text">Browser medier der er tilknyttet aktive rækkefølger</p>
                        </div>
                    </div>
                </div>
                <div class="tab-pane @(activeTab == "Rundowns" ? "show active" : "fade")">
                    <div class="card card-height-100 mb-2">
                        <div class="card-body">                           
                            <h5 class="card-title text-muted">Aktive rækkefølger</h5>
                            <RundownTable OpenRundown="OpenRundown" Rundowns="ActiveRundowns" />
                        </div>
                    </div>
                </div>
            </div>
        </div>
        @* rundown card *@
        <div class="col-xl-8">
            <Rundown SelectedRundown="selectedRundown" ControlRooms="controlRooms" UpdateRundownList="UpdateRundownListOnControlRoomChange" UpdateSelectedRundown="UpdateSelectedRundown" />

        </div>

        <div class="col-xl-1 pt-1">
            <div class="card card-height-100 mt-5">
                <AdvancedClock />
                <div class="card-body">
                    
                </div>

            </div>
        </div>
    </div>
</div>



@code {
    private string? teleprompterText { get; set; }
    private DateTime SelectedDate = DateTime.Now;
    private string activeTab = "Rundowns";
    //private string currentRundown = string.Empty;
    private RundownDTO selectedRundown = new();
    private List<ControlRoomDTO> controlRooms = new ();
    private List<RundownDTO> ActiveRundowns = new();
    private List<TemplateDTO> AllTemplates = new();

    protected override async Task OnInitializedAsync()
    {
        controlRooms = await ControlRoomService.GetControlRoomsAsync();
        ActiveRundowns = await RundownService.GetActiveRundowsAsync();
        AllTemplates = await TemplateService.GetAllTemplatesAsync();
    }

    // protected override async Task OnParametersSetAsync()
    // {
    //     ActiveRundowns = await RundownService.GetActiveRundowsAsync();
    // }
   

    private async Task UpdateRundownListOnControlRoomChange()
    {
        ActiveRundowns = await RundownService.GetActiveRundowsAsync();
        StateHasChanged();
    }

    private async Task UpdateSelectedRundown()
    {
        selectedRundown = await RundownService.GetRundownAsync(selectedRundown.Uuid.ToString());
        StateHasChanged();
    }

    private async Task OpenRundown(string uuid)
    {
        try
        {
            selectedRundown = await RundownService.GetRundownAsync(uuid);
            StateHasChanged();
        }
        catch (HttpRequestException e)
        {
            Console.WriteLine($"Error fetching rundown: {e.Message}");
        }
        activeTab = "Rundowns";
    }

    private void SelectTab(string tabName)
    {
        activeTab = tabName;
    }

    private void SetSelectedDate(DateTime date)
    {
        SelectedDate = date;
    }


    

    // private ClaimsPrincipal user;
    // private ApplicationUser currentUser;
    // private List<string> userRoles = new List<string>();

    // protected override async Task OnInitializedAsync()
    // {
    //     var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
    //     user = authState.User;

    //     if (user.Identity != null && user.Identity.IsAuthenticated)
    //     {
    //         currentUser = await UserManager.GetUserAsync(user);

    //         // Hent rollerne for den aktuelle bruger
    //         userRoles = (await UserManager.GetRolesAsync(currentUser)).ToList();
    //     }
    // }

}



