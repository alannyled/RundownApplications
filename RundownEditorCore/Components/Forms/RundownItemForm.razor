<form>
    <div class="mb-3">
        <label for="itemname" class="form-label">Navn</label>
        <input type="text" class="form-control form-control-sm" id="itemname" value="@ItemName"
               @oninput="HandleItemNameChange" />
    </div>
    <div class="mb-3">
        <label for="duration" class="form-label">Planlagt længde</label>
        <input type="time" step="1" class="form-control form-control-sm" id="duration" value="@Duration"
               @onchange="HandleDurationChange" />
    </div>
    <div class="mb-3">
        <label for="category" class="form-label">Skabelon</label>
        <select class="form-control form-control-sm" id="category" value="@Category"
                @onchange="HandleCategoryChange">
            <option value="">Vælg en Skabelon</option>
            @foreach (var category in Categories)
            {
                <option value="@category">@category</option>
            }
        </select>
    </div>
</form>

@code {
    [Parameter]
    public string ItemName { get; set; } = string.Empty;

    [Parameter]
    public string Duration { get; set; }

    [Parameter]
    public string Category { get; set; } = string.Empty;

    [Parameter]
    public List<string> Categories { get; set; } = new List<string>();

    [Parameter]
    public EventCallback<string> ItemNameChanged { get; set; }

    [Parameter]
    public EventCallback<string> DurationChanged { get; set; }

    [Parameter]
    public EventCallback<string> CategoryChanged { get; set; }

    private async Task HandleItemNameChange(ChangeEventArgs e)
    {
        ItemName = e.Value?.ToString();
        await ItemNameChanged.InvokeAsync(ItemName);
    }

    private async Task HandleDurationChange(ChangeEventArgs e)
    {
            Duration = e.Value?.ToString();
            await DurationChanged.InvokeAsync(Duration);
      
    }

    private async Task HandleCategoryChange(ChangeEventArgs e)
    {
        Category = e.Value?.ToString();
        await CategoryChanged.InvokeAsync(Category);
    }
}
