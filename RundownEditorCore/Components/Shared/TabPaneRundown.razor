@inject IRundownService RundownService
@inject ILogger<TabPaneRundown> _logger
@inject RundownState RundownState
@inject SharedStates SharedStates
@inject ModalState ModalState
@inject FormRenderService FormRenderservice

<div class="tab-pane @(ActiveTab == RundownState.Rundown.Name && !string.IsNullOrEmpty(ActiveTab) && !string.IsNullOrEmpty(RundownState.Rundown.Name) ? "show active" : "fade")">
    <div class="card card-height-100 mb-2">
        <div class="card-header d-flex justify-content-between bg-danger text-white">
            <h5 class="mb-0">@RundownState.Rundown.Name</h5>
            <h5 class="mb-0">@FormatDateWithCapitalDay(RundownState.Rundown.BroadcastDate.ToLocalTime())</h5>
        </div>

        <div class="card-header">
            <div class="d-flex">
                <div class="col-auto me-3">
                    <select class="form-select form-select-sm" @onchange="OnControlRoomChange">
                        @foreach (var room in ControlRooms)
                        {
                            <option value="@room.Uuid" selected="@(RundownState.Rundown.ControlRoomId == room.Uuid.ToString())">@room.Name</option>
                        }
                    </select>
                </div>
                <button role="button" class="btn btn-sm btn-outline-danger py-0 me-1 fs-5" @onclick="ShowRundownItemForm"><i class="bi bi-plus"></i></button>
              

            </div>
        </div>


        <div class="card-body">
            <table class="table table-hover table-bordered">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Duration</th>
                        <th>Order</th>
                    </tr>
                </thead>
                <tbody class="table-group-divider">
                    @foreach (var item in RundownState.Rundown.Items.OrderBy(i => i.Order))
                        {
                        <tr draggable="true"
                            @onclick="() => OpenTabPane.InvokeAsync(item)"
                            @key="item.UUID"
                            @ondragstart="(e) => OnDragStart(e, item.UUID.ToString())"
                            @ondrop="(e) => OnDrop(e, item.UUID.ToString())"
                            ondragover="allowDrop(event)"
                            ondragleave="leaveDrop(event)"
                            ondragend="endDrop(event)"
                            class="drag-item">
                            <td>@item.Name</td>
                            <td>@item.Duration</td>
                            <td>@item.Order</td>
                        </tr>
                        }
                </tbody>              
            </table>
        </div>

    </div>
</div>

@code {

    [Parameter]
    public EventCallback<RundownItemDTO> OpenTabPane { get; set; }
    [Parameter]
    public List<ControlRoomDTO> ControlRooms { get; set; }
    [Parameter]
    public string ActiveTab { get; set; } = string.Empty;
    // [Parameter]
    // public List<RundownObjects> CurrentObjects { get; set; } = []; // skal måske anvendes til Drag'n'Drop ?

    private string? draggedChildId;

    protected override void OnInitialized()
    {
        ControlRooms = SharedStates.ControlRooms;
        SharedStates.OnChange += HandleSharedStateChange;
    }
    /// <summary>
    /// Håndterer ændringer i SharedStates forårsaget af Kafka beskeder
    /// Hvis det påvirker den aktuelle (Scoped) Rundown, opdateres denne
    /// </summary>
    private async void HandleSharedStateChange(SharedStates.StateAction action)
    {
        if (action != SharedStates.StateAction.RundownUpdated && action != SharedStates.StateAction.ItemUpdated)
           return;

        if (RundownState?.Rundown == null || SharedStates.RundownUpdated == null)
        {
            _logger.LogWarning($"Enten RundownState.Rundown = {RundownState.Rundown} eller SharedStates.RundownUpdated = {SharedStates.RundownUpdated} var null ved håndtering af StateAction.");
            return;
        }

        if (RundownState.Rundown.UUID == SharedStates.RundownUpdated.UUID)
        {
            RundownState.SelectedRundown(SharedStates.RundownUpdated);
            await InvokeAsync(StateHasChanged);
        }

        
    }


    private string FormatDateWithCapitalDay(DateTimeOffset date)
    {
        var formattedDate = date.ToString("dddd d. MMMM yyyy", new System.Globalization.CultureInfo("da-DK"));
        return char.ToUpper(formattedDate[0]) + formattedDate.Substring(1);
    }

    private async Task OnControlRoomChange(ChangeEventArgs e)
    {
        var selectedControlRoomUuid = e.Value.ToString();
        var rundown = await RundownService.UpdateRundownControlRoomAsync(RundownState.Rundown.UUID, selectedControlRoomUuid);
        SharedStates.SharedRundown(rundown);   
    }

    List<string> Templates = ["Template1", "Template2", "Template3"];
    /// <summary>
    /// Kalder rending af Modal med RundownItemForm
    /// </summary>
    private void ShowRundownItemForm()
    {
        var content = new RenderFragment(builder =>
        {
            builder.AddContent(0, FormRenderservice.RenderRundownItemForm(
            Templates
        ));
        });

        ModalState.SetContent(content, "Opret ny historie");

    }

    private void OnDragStart(DragEventArgs e, string childId)
    {
        draggedChildId = childId;
    }

    private async Task OnDrop(DragEventArgs e, string targetChildId)
    {
        if (draggedChildId != null && draggedChildId != targetChildId) // Tjek at det ikke er droppet på sig selv
        {
            var draggedItem = RundownState.Rundown.Items.FirstOrDefault(x => x.UUID.ToString() == draggedChildId);
            var targetItem = RundownState.Rundown.Items.FirstOrDefault(x => x.UUID.ToString() == targetChildId);

            if (draggedItem != null && targetItem != null)
            {
                var targetIndex = RundownState.Rundown.Items.IndexOf(targetItem);
                var draggedIndex = RundownState.Rundown.Items.IndexOf(draggedItem);
                RundownState.Rundown.Items.Remove(draggedItem);
                if (draggedIndex < targetIndex)
                {
                    targetIndex--; // Fordi elementerne forskydes, når et element fjernes før målplaceringen
                }
                targetIndex++;
                if (targetIndex > RundownState.Rundown.Items.Count)
                {
                    targetIndex = RundownState.Rundown.Items.Count;
                }
                RundownState.Rundown.Items.Insert(targetIndex, draggedItem);
                UpdateItemOrderValues();

                await RundownService.UpdateRundownAsync(RundownState.Rundown.UUID, RundownState.Rundown);

                // Eventuelt opdater shared state (afhængig af om Kafka gør det samme)
                SharedStates.SharedRundown(RundownState.Rundown);
            }
        }
        draggedChildId = null;
    }

    /// <summary>
    /// Opdaterer Order-værdien for hvert element i listen konsekvent fra 0 og opefter.
    /// </summary>
    private void UpdateItemOrderValues()
    {
        int index = 0;
        foreach (var item in RundownState.Rundown.Items)
        {
            item.Order = index++;
        }
    }



    /// <summary>
    /// Fjerner abonnementet for at undgå memory leaks
    /// </summary>
    public void Dispose()
    {
        SharedStates.OnChange -= HandleSharedStateChange;
    }

}
