@using CommonClassLibrary.DTO
@using RundownEditorCore.Interfaces
@inject IRundownService RundownService
@inject ToastState ToastState


@if (isLoading)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="table-responsive">
        <table class="table table-sm table-striped">
            <thead>
                <tr>

                    <th>Navn</th>
                    <th>Udsendelses dato</th>
                    <th>Kontrolrum</th>
                    @if (ShowArchived)
                    {
                        <th class="text-center">Arkiveret</th>
                    }
                </tr>
            </thead>
            <tbody>
                @foreach (var rundown in Rundowns.OrderBy(r => r.BroadcastDate).Reverse())
                {
                    if (rundown.BroadcastDate.Date >= SelectedDate.Date)
                    {
                        <tr role="button" @onclick="() => OpenThisRundown(rundown.Uuid.ToString())">

                            <td class="text-nowrap">@rundown.Name</td>
                            <td class="text-nowrap">@rundown.BroadcastDate.ToLocalTime().ToString("dddd d. MMMM yyyy")</td>
                            <td class="text-nowrap">@rundown.ControlRoomName</td>
                            @if (ShowArchived)
                            {
                                <td class="text-center">
                                    <input type="checkbox" checked="@(@IsArchived(rundown.ArchivedDate))" @onchange="() => HandleCheckBoxChange(rundown)" />
                                </td>
                            }


                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>
}

@code {
        [Parameter]
        public EventCallback<string> OpenRundown { get; set; }
        [Parameter]
        public List<RundownDTO>? Rundowns { get; set; }
        [Parameter]
        public DateTime SelectedDate { get; set; }
        [Parameter]
        public bool ShowArchived { get; set; } = false;

    // private List<RundownDTO>? rundowns;
    private bool isLoading = true;
    private string? errorMessage;

    public async Task OpenThisRundown(string uuid)
    {
        await OpenRundown.InvokeAsync(uuid);
    }

    public bool IsArchived(DateTime? archivedDate)
    {
        return archivedDate.HasValue;

    }


    public async Task<RundownDTO> HandleCheckBoxChange(RundownDTO rundown)
    {
       // RundownDTO updatedRundown = new RundownDTO();
        var date = DateTime.Now;
        string message = "";
        Console.WriteLine("Rundown DATE before:" + rundown.ArchivedDate);
        if (string.IsNullOrEmpty(rundown.ArchivedDate.ToString())){
            rundown.ArchivedDate = date;
            message = "Rækkefølge er arkiveret";
        }
        else
        {
            rundown.ArchivedDate = null;
            message = "Rækkefølge er aktiveret igen";
        }
        Console.WriteLine("Rundown updated 1 " + rundown.ArchivedDate);
        rundown = await RundownService.UpdateRundownAsync(rundown.Uuid, rundown);

        Console.WriteLine("Rundown updated 2 " + rundown.ArchivedDate);
        if(ToastState.Show)
            ToastState.Close();
        ToastState.FireToast(message, "text-bg-success");
        return rundown;
    }

    protected override async Task OnInitializedAsync()
    {
        if (!isLoading) return;

        try
        {
            Rundowns = await RundownService.GetActiveRundowsAsync();


        }
        catch (HttpRequestException httpEx)
        {
            errorMessage = $"Fejl ved hentning af data: {httpEx.Message}";
        }
        catch (Exception ex)
        {
            errorMessage = $"En uventet fejl opstod: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }



}
