@inject IRundownService RundownService
@inject IControlRoomService ControlRoomService
@inject RundownState RundownState
@inject SharedStates SharedStates
@inject ModalState ModalState
@inject FormRenderService FormRenderservice

<div class="tab-pane @(ActiveTab == RundownState.Rundown.Name && !string.IsNullOrEmpty(ActiveTab) && !string.IsNullOrEmpty(RundownState.Rundown.Name) ? "show active" : "fade")">
    <div class="card card-height-100 mb-2">
        <div class="card-header d-flex justify-content-between bg-danger text-white">
            <h5 class="mb-0">@RundownState.Rundown.Name</h5>
            <h5 class="mb-0">@FormatDateWithCapitalDay(RundownState.Rundown.BroadcastDate.ToLocalTime())</h5>
        </div>

        <div class="card-header">
            <div class="d-flex">
                <div class="col-auto me-3">
                    <select class="form-select form-select-sm" @onchange="OnControlRoomChange">
                        @foreach (var room in ControlRooms)
                        {
                            <option value="@room.Uuid" selected="@(RundownState.Rundown.ControlRoomId == room.Uuid.ToString())">@room.Name</option>
                        }
                    </select>
                </div>
                <button role="button" class="btn btn-sm btn-outline-danger py-0 me-1 fs-5" @onclick="ShowRundownStoryForm"><i class="bi bi-plus"></i></button>


            </div>
        </div>


        <div class="card-body">
            <table class="table table-hover table-bordered">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Duration</th>
                        <th>Details</th>
                        <th>Videos</th>
                        <th>Graphics</th>
                        <th class="text-danger text-center">Slet</th>
                    </tr>
                </thead>
                <tbody class="table-group-divider">
                    @foreach (var story in RundownState.Rundown.Stories.OrderBy(i => i.Order))
                    {
                        <tr draggable="true"
                            @onclick="() => OpenTabPane.InvokeAsync(story)"
                            @key="story.UUID"
                            @ondragstart="(e) => OnDragStart(e, story.UUID.ToString())"
                            @ondrop="(e) => OnDrop(e, story.UUID.ToString())"
                            ondragover="allowDrop(event)"
                            ondragleave="leaveDrop(event)"
                            ondragend="endDrop(event)"
                            class="drag-story">
                            <td>@story.Name</td>
                            <td>@story.Duration</td>
                            <td>@story.Details.Count</td>
                            <td>@story.Details.Count(detail => detail.Type == "Video")</td>
                            <td>@story.Details.Count(detail => detail.Type == "Grafik")</td>
                            <td class="text-danger text-center" role="button" @onclick:stopPropagation @onclick="() => ConfirmDelete(story)"><i class="bi bi-trash"></i></td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

    </div>
</div>

@code {

    [Parameter]
    public EventCallback<RundownStoryDTO> OpenTabPane { get; set; }
    [Parameter]
    public string ActiveTab { get; set; } = string.Empty;

    public List<ControlRoomDTO> ControlRooms { get; set; } = [];
    private string? draggedChildId;

    protected override async Task OnInitializedAsync()
    {
        if (SharedStates.ControlRooms.Count == 0)
        {
            ControlRooms = await ControlRoomService.GetControlRoomsAsync() ?? [];
            SharedStates.SharedControlRoom(ControlRooms);
        }
        else
        {
            ControlRooms = SharedStates.ControlRooms;
        }
        SharedStates.OnChange += HandleSharedStateChange;
    }
    /// <summary>
    /// Håndterer ændringer i SharedStates forårsaget af Kafka beskeder
    /// Hvis det påvirker den aktuelle (Scoped) Rundown, opdateres denne
    /// </summary>
    private async void HandleSharedStateChange(SharedStates.StateAction action)
    {
        if (action == SharedStates.StateAction.AllRundownsUpdated || action == SharedStates.StateAction.StoryUpdated)
        {
            if (RundownState?.Rundown == null || SharedStates.RundownUpdated == null) return;
            var currentRundown = SharedStates.AllRundowns.FirstOrDefault(r => r.UUID == RundownState.Rundown.UUID);
            if (currentRundown == null) return;
            RundownState.SelectedRundown(currentRundown);
            await InvokeAsync(StateHasChanged);
        }

        if(action == SharedStates.StateAction.ControlRoomsUpdated)
        {
            ControlRooms = SharedStates.ControlRooms;
            await InvokeAsync(StateHasChanged);
        }
    }
    /// <summary>
    /// Formattere et pænt dato format til UI
    /// </summary>
    private string FormatDateWithCapitalDay(DateTimeOffset date)
    {
        var formattedDate = date.ToString("dddd d. MMMM yyyy", new System.Globalization.CultureInfo("da-DK"));
        return char.ToUpper(formattedDate[0]) + formattedDate.Substring(1);
    }

    private async Task OnControlRoomChange(ChangeEventArgs e)
    {
        var selectedControlRoomUuid = e?.Value?.ToString() ?? string.Empty;
        await RundownService.UpdateRundownControlRoomAsync(RundownState.Rundown.UUID, selectedControlRoomUuid);      
    }



    List<string> Templates = ["Template1", "Template2", "Template3"];
    /// <summary>
    /// Kalder rending af Modal med RundownStoryForm
    /// </summary>
    private void ShowRundownStoryForm()
    {
        var content = new RenderFragment(builder =>
        {
            builder.AddContent(0, FormRenderservice.RenderRundownStoryForm(
            Templates
        ));
        });

        ModalState.SetContent(content, "Opret ny historie");

    }

    private void OnDragStart(DragEventArgs e, string childId)
    {
        draggedChildId = childId;
    }

    private async Task OnDrop(DragEventArgs e, string targetChildId)
    {
        if (draggedChildId != null && draggedChildId != targetChildId)
        {
            var storiesCopy = RundownState.Rundown.Stories.ToList();

            var draggedStory = storiesCopy.FirstOrDefault(x => x.UUID.ToString() == draggedChildId);
            var targetStory = storiesCopy.FirstOrDefault(x => x.UUID.ToString() == targetChildId);

            if (draggedStory != null && targetStory != null)
            {
                var targetIndex = storiesCopy.IndexOf(targetStory);
                var draggedIndex = storiesCopy.IndexOf(draggedStory);

                storiesCopy.Remove(draggedStory);
                if (draggedIndex < targetIndex)
                {
                    targetIndex--;
                }
                targetIndex++;
                if (targetIndex > storiesCopy.Count)
                {
                    targetIndex = storiesCopy.Count;
                }
                storiesCopy.Insert(targetIndex, draggedStory);

                // Opdater order i kopien
                UpdateStoryOrderValues(storiesCopy);

                // Send kun kopien til databasen
                var updatedRundown = RundownState.Rundown;
                updatedRundown.Stories = storiesCopy;
                await RundownService.UpdateRundownAsync(RundownState.Rundown.UUID, updatedRundown);
                // RundownState opdateres først, når Kafka bekræfter ændringen
            }
        }
        draggedChildId = null;
    }

    private void UpdateStoryOrderValues(List<RundownStoryDTO> stories)
    {
        for (int i = 0; i < stories.Count; i++)
        {
            stories[i].Order = i;
        }
    }

    private void ConfirmDelete(RundownStoryDTO story)
    {
        var content = new RenderFragment(builder =>
        {
            builder.AddContent(0, FormRenderservice.RenderDeleteStoryForm(story));
        });
        ModalState.SetContent(content, $"Bekræft sletning af {story.Name}");
    }

    /// <summary>
    /// Opdaterer Order-værdien for hvert element i listen konsekvent fra 0 og opefter.
    /// </summary>
    private void UpdateStoryOrderValues()
    {
        int index = 0;
        foreach (var story in RundownState.Rundown.Stories)
        {
            story.Order = index++;
        }
    }

    /// <summary>
    /// Fjerner abonnementet for at undgå memory leaks
    /// </summary>
    public void Dispose()
    {
        SharedStates.OnChange -= HandleSharedStateChange;
    }

}
