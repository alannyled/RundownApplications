@using RundownEditorCore.DTO
@using RundownEditorCore.Interfaces
@inject IRundownService RundownService

<div class="tab-pane @(ActiveTab == SelectedRundown.Name && !string.IsNullOrEmpty(ActiveTab) && !string.IsNullOrEmpty(SelectedRundown.Name) ? "show active" : "fade")">
    <div class="card card-height-100 mb-2">
        <div class="card-header d-flex justify-content-between bg-danger text-white">
            <h5 class="mb-0">@SelectedRundown.Name</h5>
            <h5 class="mb-0">@FormatDateWithCapitalDay(SelectedRundown.BroadcastDate)</h5>
        </div>

        <div class="card-header">
            <div class="d-flex">
                <div class="col-auto me-3">
                    <select class="form-select form-select-sm" @onchange="OnControlRoomChange">
                        @foreach (var room in ControlRooms)
                        {
                            <option value="@room.Uuid" selected="@(SelectedRundown.ControlRoomId.ToString() == room.Uuid)">@room.Name</option>
                        }
                    </select>
                </div>
                <button role="button" class="btn btn-sm btn-outline-danger py-0 me-1 fs-5" @onclick="() => ShowDialog.InvokeAsync()"><i class="bi bi-plus"></i></button>
              

            </div>
        </div>


        <div class="card-body">
            <table class="table table-hover table-bordered">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Duration</th>
                        <th>Order</th>
                    </tr>
                </thead>
                <tbody>               
                        @foreach (var item in SelectedRundown.Items.OrderBy(i => i.Order))
                        {
                        <tr draggable="true"
                            @onclick="() => OpenTabPane.InvokeAsync(item.Name)"
                            @key="item.UUID"
                            @ondragstart="(e) => OnDragStart(e, item.UUID.ToString())"
                            @ondrop="(e) => OnDrop(e, item.UUID.ToString())"
                            ondragover="allowDrop(event)"
                            ondragleave="leaveDrop(event)"
                            ondragend="endDrop(event)"
                            class="drag-item">
                            <td>@item.Name</td>
                            <td>@item.Duration</td>
                            <td>@item.Order</td>
                        </tr>
                        }
                </tbody>              
            </table>
        </div>

    </div>
</div>

@code {

    [Parameter]
    public EventCallback ShowDialog { get; set; }
    [Parameter]
    public EventCallback<string> OpenTabPane { get; set; }
    [Parameter]
    public EventCallback UpdateRundownList { get; set; }
    [Parameter]
    public RundownDTO SelectedRundown { get; set; } = new();
    [Parameter]
    public List<ControlRoomDTO> ControlRooms { get; set; }
    [Parameter]
    public string ActiveTab { get; set; } = string.Empty;
    [Parameter]
    public List<RundownObjects> CurrentObjects { get; set; } = [];
  
    private string selectedControlRoomId = string.Empty;

    private string? draggedChildId;

    private string FormatDateWithCapitalDay(DateTime date)
    {
        var formattedDate = date.ToString("dddd d. MMMM yyyy", new System.Globalization.CultureInfo("da-DK"));
        return char.ToUpper(formattedDate[0]) + formattedDate.Substring(1);
    }

    private async Task OnControlRoomChange(ChangeEventArgs e)
    {
        var selectedControlRoomUuid = e.Value.ToString();
        await RundownService.UpdateRundownControlRoomAsync(SelectedRundown.Uuid.ToString(), selectedControlRoomUuid);       
        await UpdateRundownList.InvokeAsync();
       
    }

    private void OnDragStart(DragEventArgs e, string childId)
    {
        draggedChildId = childId;
    }

    private async Task OnDrop(DragEventArgs e, string targetChildId)
    {
        if (draggedChildId != null && draggedChildId != targetChildId) // Tjek at det ikke er droppet på sig selv
        {
            var draggedChild = CurrentObjects.FirstOrDefault(x => x.Id == draggedChildId);
            var targetChild = CurrentObjects.FirstOrDefault(x => x.Id == targetChildId);

            if (draggedChild != null && targetChild != null)
            {
                CurrentObjects.Remove(draggedChild);
                var targetIndex = CurrentObjects.IndexOf(targetChild);

                if (targetIndex >= 0)
                {
                    CurrentObjects.Insert(targetIndex, draggedChild);
                }
                await InvokeAsync(StateHasChanged);
            }
        }

        draggedChildId = null;
    }


}
