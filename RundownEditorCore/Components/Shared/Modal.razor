
@inject ModalState ModalState

<div id="modal-backdrop" class="modal-backdrop fade @(ModalState.Show ? "show" : "")"></div>

<div class="modal fade @(ModalState.Show ? "show" : "none")" style='display:@(ModalState.Show  ? "block" : "none")' @onclick="CloseDialog" tabindex="-1">
    <div class="modal-dialog" style="margin: 10rem auto">
        <div class="modal-content" @onclick:stopPropagation>
            <div class="modal-header">
                <h5 class="modal-title">@ModalState.Title</h5>
                <button type="button" class="btn-close" @onclick="CloseDialog"></button>
            </div>
            <div class="modal-body">
                @ModalState.Content
            </div>
        </div>
    </div>
</div>

@code {

    protected override async Task OnInitializedAsync()
    {
        ModalState.OnChange += StateHasChanged;
    }    

    private void CloseDialog()
    {
        ModalState.Close();
    }

    public void Dispose()
    {
        ModalState.OnChange -= StateHasChanged;
    }

}
