@using CommonClassLibrary.DTO
@using RundownEditorCore.Interfaces
@inject IRundownService RundownService
@inject RundownState RundownState
@inject SharedStates SharedStates
@inject ModalState ModalState
@inject ToastState ToastState

@if (isCreating)
{
    <div class="d-flex justify-content-center my-5">
        <div class="spinner-border text-danger" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
    <p class="text-center my-5">Opretter ny rækkefølge.</p>
}
else
{
<form @onsubmit="HandleSubmit">
    <div class="mb-3">
        <label for="broadcastdate" class="form-label">Udsendelsedato</label>
        <input type="date" id="broadcastdate" class="form-control form-control-sm"
               @bind="BroadcastDate" />
    </div>

    <div class="mb-3">
        <label for="category" class="form-label">Skabelon</label>
        <select id="category" class="form-control form-control-sm"
                @bind="Template">
            <option value="">Vælg en Skabelon</option>
            @foreach (var template in SharedStates.Templates)
            {
                <option value="@template.Uuid">@template.Name</option>
            }
        </select>
    </div>

    <div class="mb-3">
        <label for="controlroom" class="form-label">Kontrolrum</label>
        <select id="controlroom" class="form-control form-control-sm"
                @bind="ControlRoom">
            <option value="">Vælg kontrolrum</option>
            @foreach (var controlroom in SharedStates.ControlRooms)
            {
                <option value="@controlroom.Uuid">@controlroom.Name</option>
            }
        </select>
    </div>
    <div class="d-flex justify-content-end">
        <button type="submit" class="btn btn-sm btn-primary">Opret rækkefølge</button>
    </div>
</form>
}

@code {

    [Parameter]
    public DateTime BroadcastDate { get; set; } = DateTime.Now;

    public string Template { get; set; } = string.Empty;
    public string ControlRoom { get; set; } = string.Empty;
    public bool isCreating { get; set; } = false;

    private async Task HandleSubmit()
    {
        if (string.IsNullOrEmpty(Template))
        {
            ToastState.FireToast("Vælg Skabelon", "text-bg-warning");
            return;
        }
        if (string.IsNullOrEmpty(ControlRoom))
        {
            ToastState.FireToast("Vælg Kontrolrum", "text-bg-warning");
            return;
        }
        isCreating = true;
        bool success = await CreateRundown();
        isCreating = false;
        if(success) ModalState.Close();
    }

    private async Task<bool> CreateRundown()
    {
        await Task.Delay(1500); // Simulere at der går lidt tid før det er oprettet
        var rundown = await RundownService.CreateRundownFromTemplate(Template, ControlRoom, BroadcastDate);
        if (rundown == null)
        {
            ToastState.FireToast("Der skete en fejl. Prøv igen", "text-bg-danger");
            return false;
        }
        ToastState.FireToast($"Ny rækkefølge er oprettet.", "text-bg-success");
        RundownState.SelectedRundown(rundown);
        return true;
    }
}
