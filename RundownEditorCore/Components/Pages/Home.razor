@page "/"
@using System.Text.Json;
@using RundownEditorCore.Components.Shared
@using RundownEditorCore.Data
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using System.Security.Claims
@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IHttpClientFactory ClientFactory
@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider

@attribute [Authorize(Roles = "User")]
<PageTitle>Home</PageTitle>


<div class="container-fluid full-height">
    <div class="row h-100">
        <div class="col-xl-3 h-100">
            <ul class="nav nav-tabs mb-2">
                <TabItem MenuItem="Rundowns" ActiveTab="@activeTab" SelectTab="SelectTab" />
                <TabItem MenuItem="Media" ActiveTab="@activeTab" SelectTab="SelectTab" />
                <TabItem MenuItem="Templates" ActiveTab="@activeTab" SelectTab="SelectTab" />
            </ul>
            <div class="tab-content">
                <div class="tab-pane @(activeTab == "Rundowns" ? "show active" : "fade")">
                    <div class="card card-height-100 mb-2">

                        <div class="card-body">
                            <h5 class="card-title">Aktive Rækkefølger</h5>

                            <TemplatesTable OpenRundown="OpenRundown" />
                        </div>
                    </div>
                </div>
                <div class="tab-pane @(activeTab == "Media" ? "show active" : "fade")">
                    <div class="card card-height-100 mb-2">

                        <div class="card-body">
                            <h5 class="card-title">Media browser</h5>
                            <p class="card-text">With supporting text below as a natural lead-in to additional content.</p>
                        </div>
                    </div>
                </div>
                <div class="tab-pane @(activeTab == "Templates" ? "show active" : "fade")">
                    <div class="card card-height-100 mb-2">
                        <div class="card-body">
                            <Calendar ReturnSelectedDate="SetSelectedDate" />
                            <hr />
                            <h5 class="card-title text-muted">Templates</h5>
                            <TemplatesTable OpenRundown="OpenRundown" />
                        </div>
                    </div>
                </div>
            </div>
        </div>
        @* rundown card *@
        <div class="col-xl-8">
            <Rundown CurrentRundown="@currentRundown" SelectedDate="@SelectedDate" />
            @* <div class="card full-height">
            <div class="card-body">

            <p>Indsæt tekst til teleprompter</p>
            <textarea @bind="teleprompterText"></textarea>

            <button role="button" @onclick="SaveText">Gem</button>
            </div>
            </div> *@
        </div>

        <div class="col-xl-1 pt-1">
            <div class="card card-height-100 mt-5">
                <AdvancedClock />
                <div class="card-body">
                    
                </div>

            </div>
        </div>
    </div>
</div>



@code {
    private string? teleprompterText { get; set; }
    private DateTime SelectedDate { get; set; } = DateTime.Now;
    private string activeTab = "Templates";
    private string currentRundown = string.Empty;

    private ClaimsPrincipal user;
    private ApplicationUser currentUser;
    private List<string> userRoles = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        user = authState.User;

        if (user.Identity != null && user.Identity.IsAuthenticated)
        {
            currentUser = await UserManager.GetUserAsync(user);

            // Hent rollerne for den aktuelle bruger
            userRoles = (await UserManager.GetRolesAsync(currentUser)).ToList();
        }
    }


    private void OpenRundown(string rundown)
    {
        currentRundown = rundown;
        activeTab = "Rundowns";
        // Create rundown on selected date if not exists
        Console.WriteLine($"Create rundown = {rundown} on {SelectedDate} if not exists");
    }
    private void SelectTab(string tabName)
    {
        activeTab = tabName;
    }

    private void SetSelectedDate(DateTime date)
    {
        SelectedDate = date;
    }

    private async Task SaveText()
    {
        var client = ClientFactory.CreateClient("TemplatesAPI");

        // Opret et objekt med de data, der skal sendes
        var teleprompterTest = new
        {
            teleprompterTestId = 0,
            text = teleprompterText
        };

        // Serialiser objektet til JSON
        var jsonContent = JsonSerializer.Serialize(teleprompterTest);

        // Opret JSON-indholdet til HTTP POST-requesten
        var content = new StringContent(jsonContent, System.Text.Encoding.UTF8, "application/json");

        // Send POST-requesten til API'en
        var response = await client.PostAsync("teleprompter/telepromptertests/create", content);

        if (response.IsSuccessStatusCode)
        {
            Console.WriteLine("Tekst gemt succesfuldt!");
        }
        else
        {
            Console.WriteLine($"Fejl ved gemning: {response.StatusCode}");
        }
    }

}
