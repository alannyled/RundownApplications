@using CommonClassLibrary.DTO
@using RundownEditorCore.Interfaces
@inject IRundownService RundownService
@inject RundownState RundownState
@inject ModalState ModalState
@inject ToastState ToastState

<form @onsubmit="HandleSubmit">
    <div class="mb-3">
        <label for="broadcastdate" class="form-label">Udsendelsedato</label>
        <input type="date" id="broadcastdate" class="form-control form-control-sm"
               @bind="BroadcastDate" />
    </div>

    <div class="mb-3">
        <label for="category" class="form-label">Skabelon</label>
        <select id="category" class="form-control form-control-sm"
                @bind="Template">
            <option value="">Vælg en Skabelon</option>
            @foreach (var template in Templates)
            {
                <option value="@template.Uuid">@template.Name</option>
            }
        </select>
    </div>

    <div class="mb-3">
        <label for="controlroom" class="form-label">Kontrolrum</label>
        <select id="controlroom" class="form-control form-control-sm"
                @bind="ControlRoom">
            <option value="">Vælg kontrolrum</option>
            @foreach (var controlroom in ControlRooms)
            {
                <option value="@controlroom.Uuid">@controlroom.Name</option>
            }
        </select>
    </div>
    <div class="d-flex justify-content-end">
        <button type="submit" class="btn btn-sm btn-primary">Opret rækkefølge</button>
    </div>
</form>

@code {

    [Parameter]
    public List<TemplateDTO> Templates { get; set; } = new List<TemplateDTO>();
    [Parameter]
    public List<ControlRoomDTO> ControlRooms { get; set; } = new List<ControlRoomDTO>();
    [Parameter]
    public DateTime BroadcastDate { get; set; } = DateTime.Now;

    public string Template { get; set; } = string.Empty;
    public string ControlRoom { get; set; } = string.Empty;

    private async Task<bool> HandleSubmit()
    {
        if (string.IsNullOrEmpty(Template))
        {
            ToastState.FireToast("Vælg Skabelon", "text-bg-warning");
            return false;
        }
        if (string.IsNullOrEmpty(ControlRoom))
        {
            ToastState.FireToast("Vælg Kontrolrum", "text-bg-warning");
            return false;
        }
        var rundown = await RundownService.CreateRundownFromTemplate(Template, ControlRoom, BroadcastDate);
        RundownState.SelectedRundown(rundown);
        ModalState.Close();
        var activeRundowns = await RundownService.GetRundownsAsync();
        return true;
    }
}
