@using RundownEditorCore.Components.Shared
@using RundownEditorCore.DTO
@using RundownEditorCore.Interfaces
@inject IRundownService RundownService


@if (!string.IsNullOrEmpty(SelectedRundown.Name))
{
    <ul class="nav nav-tabs mb-2">
        <TabItem MenuItem="@SelectedRundown.Name" ActiveTab="@activeTab" SelectTab="SelectTab" />
        @foreach (var item in menuTabs)
        {
            @item.Content
        }
    </ul>
}
<div class="tab-content">

    <TabPaneRundown SelectedRundown="SelectedRundown"
                    ControlRooms="ControlRooms"
                    ActiveTab="@activeTab"
                    UpdateRundownList="ControlRoomChange"
                    ShowDialog="OpenModal"
                    OpenTabPane="OpenTabPane"
                    CurrentObjects="RundownObjects" />

    @foreach (var tab in tabPanes)
    {
        @tab.Content
    }
</div>

@code {
    [Parameter]
    public EventCallback OpenModal { get; set; }
    [Parameter]
    public RundownDTO SelectedRundown { get; set; }
    [Parameter]
    public List<ControlRoomDTO> ControlRooms { get; set; }
    [Parameter]
    public EventCallback UpdateRundownList { get; set; }
    [Parameter]
    public EventCallback UpdateSelectedRundown { get; set; }

    private bool showDialog = false;
    private string activeTab = string.Empty;

    private List<TabFragment> menuTabs = new();
    private List<TabFragment> tabPanes = new();
    // anvendes ved drag n drop lige nu - en anden logik måske?
    public List<RundownObjects> RundownObjects { get; set; } = new List<RundownObjects>(); // brug RundownItemsDTO i stedet for??

    protected override void OnParametersSet()
    {
        if (activeTab != SelectedRundown.Name && !string.IsNullOrEmpty(SelectedRundown.Name))
        {
            activeTab = SelectedRundown.Name;
            menuTabs = [];
            tabPanes = [];
        }
    }

    private async Task ControlRoomChange()
    {
        await UpdateRundownList.InvokeAsync();
        StateHasChanged();
    }

    private void SelectTab(string tabName)
    {
        activeTab = tabName;
    }   

    private void OpenTabPane(string tabName)
    {
        activeTab = tabName;

        if (!menuTabs.Any(tab => tab.Name == tabName))
        {
            AddMenuTab();
        }
    }

    private void AddMenuTab()
    {
        string tabName = activeTab;
        var newChild = new RenderFragment(builder =>
        {
            builder.OpenComponent<TabItem>(0);
            builder.AddAttribute(1, "MenuItem", tabName);
            builder.AddAttribute(2, "ActiveTab", activeTab);
            builder.AddAttribute(3, "SelectTab", EventCallback.Factory.Create<string>(this, SelectTab));
            builder.CloseComponent();
        });

        menuTabs.Add(new TabFragment
            {
                Name = tabName,
                Content = newChild
            });

        AddTabPane();
    }

    private void AddTabPane()
    {
        string tabName = activeTab;

        var newChild = new RenderFragment(builder =>
        {
            builder.OpenComponent<TabPaneRundownItem>(0);
            builder.AddAttribute(1, "Name", tabName);
            builder.AddAttribute(2, "ActiveTab", activeTab);
            builder.AddAttribute(3, "OnRemove", EventCallback.Factory.Create<string>(this, RemoveTabPane));
            builder.CloseComponent();
        });

        tabPanes.Add(new TabFragment
            {
                Name = tabName,
                Content = newChild
            });

    }

    private void RemoveTabPane(string tabName)
    {
        var tabToRemove = tabPanes.FirstOrDefault(tab => tab.Name == tabName);
        if (tabToRemove != null)
        {
            tabPanes.Remove(tabToRemove);
            RemoveTab(tabName);
        }
    }

    private void RemoveTab(string tabName)
    {
        var tabToRemove = menuTabs.FirstOrDefault(tab => tab.Name == tabName);
        if (tabToRemove != null)
        {
            menuTabs.Remove(tabToRemove);
            activeTab = SelectedRundown.Name;
            StateHasChanged();
        }
    }

    public class TabFragment
    {
        public string? Name { get; set; }
        public RenderFragment? Content { get; set; }
    }


}


