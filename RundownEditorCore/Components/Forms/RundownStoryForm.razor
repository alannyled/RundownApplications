@using CommonClassLibrary.DTO
@inject IRundownService RundownService
@inject ILogger<TabPaneRundown> Logger
@inject RundownState RundownState
@inject ToastState ToastState
@inject ModalState ModalState

@if (isCreating)
{
    <div class="d-flex justify-content-center my-5">
        <div class="spinner-border text-danger" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
    <p class="text-center my-5">Opretter @StoryName</p>
}
else
{
<form @onsubmit="HandleSubmit">
    <div class="mb-3">
        <label for="Storyname" class="form-label">Titel</label>
        <input type="text" class="form-control form-control-sm" id="Storyname" @bind="@StoryName"/>
    </div>
    <div class="mb-3">
        <label for="duration" class="form-label">Planlagt længde</label>
        <input type="time" step="1" class="form-control form-control-sm" id="duration" @bind="@Duration" />
    </div>
    <div class="mb-3">
        <label for="category" class="form-label">Skabelon</label>
        <select class="form-control form-control-sm" id="category" @bind="@Template">
            <option value="">Vælg en Skabelon</option>
            @foreach (var template in Templates)
            {
                <option value="@template">@template</option>
            }
        </select>
    </div>
    <div class="d-flex justify-content-end">
        <button type="submit" class="btn btn-sm btn-primary">Opret historie</button>
    </div>
</form>
}

@code {

    [Parameter]
    public List<string> Templates { get; set; } = new List<string>();

    public string StoryName { get; set; } = string.Empty;
    public TimeOnly Duration { get; set; } = new TimeOnly(0, 0, 0);
    public string Template { get; set; } = string.Empty;
    public bool isCreating { get; set; } = false;

    private async Task HandleSubmit()
    {
        var selectedRundown = RundownState.Rundown;
        if (string.IsNullOrEmpty(StoryName))
        {
            ToastState.FireToast("Du skal angive en titel", "text-bg-warning");
            return;
        }
        isCreating = true;
        var newRundownStory = new RundownStoryDTO
            {
                UUID = Guid.NewGuid(),
                RundownId = selectedRundown.UUID,
                Name = StoryName,
                Duration = Duration.ToString("HH:mm:ss"),
                Order = selectedRundown.Stories.Count // + 1  eller *10?
            };


        //var rundown = await RundownService.AddStoryToRundownAsync(selectedRundown.UUID, newRundownStory);
        bool success = await SaveNewStory(selectedRundown.UUID, newRundownStory);
        isCreating = false;
        if (success) ModalState.Close();
    }

    private async Task<bool> SaveNewStory(string UUID, RundownStoryDTO newRundownStory)
    {
        await Task.Delay(1000); // Simulere at der går lidt tid før det er oprettet
        var rundown = await RundownService.AddStoryToRundownAsync(UUID, newRundownStory);
        if (rundown == null)
        {
            ToastState.FireToast("Der skete en fejl. Prøv igen", "text-bg-danger");
            return false;
        }
        ToastState.FireToast($"{StoryName} er oprettet.", "text-bg-success");

        Logger.LogWarning($"Ny historie: {StoryName} er oprettet i {rundown.Name}");
        return true;
    }
}
