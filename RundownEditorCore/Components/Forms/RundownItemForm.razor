@using RundownEditorCore.DTO
@using RundownEditorCore.Interfaces

<form @onsubmit="HandleSubmit">
    <div class="mb-3">
        <label for="itemname" class="form-label">Navn</label>
        <input type="text" class="form-control form-control-sm" id="itemname" @bind="@ItemName"/>
    </div>
    <div class="mb-3">
        <label for="duration" class="form-label">Planlagt længde</label>
        <input type="time" step="1" class="form-control form-control-sm" id="duration" @bind="@Duration" />
    </div>
    <div class="mb-3">
        <label for="category" class="form-label">Skabelon</label>
        <select class="form-control form-control-sm" id="category" @bind="@Template">
            <option value="">Vælg en Skabelon</option>
            @foreach (var template in Templates)
            {
                <option value="@template">@template</option>
            }
        </select>
    </div>
    <div class="d-flex justify-content-end">
        <button type="submit" class="btn btn-sm btn-primary">Opret rækkefølge objekt</button>
    </div>
</form>

@code {
    [Inject]
    private IRundownService RundownService { get; set; }

    [Parameter]
    public List<string> Templates { get; set; } = new List<string>();
    [Parameter]
    public RundownDTO SelectedRundown { get; set; }
    [Parameter]
    public EventCallback<RundownDTO> OnItemCreated { get; set; }

    // [Parameter]
    public string ItemName { get; set; } = string.Empty;

    // [Parameter]
    public TimeOnly Duration { get; set; } = new TimeOnly(0, 0, 0);

    // [Parameter]
    public string Template { get; set; } = string.Empty;

    private async Task HandleSubmit()
    {
        // if (string.IsNullOrEmpty(ItemName))
        // {
        //     validationMessage = "Navnet må ikke være tomt.";
        //     return;
        // }

        var newRundownItem = new RundownItemDTO
            {
                UUID = Guid.NewGuid(),
                RundownId = SelectedRundown.Uuid,
                Name = ItemName,
                Duration = Duration.ToString(),
                Order = SelectedRundown.Items.Count // + 1  eller *10?
            };

     
        SelectedRundown = await RundownService.AddItemToRundownAsync(SelectedRundown.Uuid, newRundownItem);

  
        // var result = new CreateRundownItemResultDTO
        //     {
        //         SelectedRundown = updatedRundown
        //     };

        await OnItemCreated.InvokeAsync(SelectedRundown);
    }


}
