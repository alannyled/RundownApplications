@page "/"

@inject IRundownService RundownService
@inject IControlRoomService ControlRoomService
@inject ITemplateService TemplateService
@inject IHttpClientFactory ClientFactory
@inject FormRenderService FormRenderservice
@inject ModalState ModalState
@inject ToastState ToastState
@inject RundownState RundownState
@inject SharedStates SharedStates
@using Microsoft.AspNetCore.Authorization
@using CommonClassLibrary.DTO

@attribute [Authorize(Roles = "User,Administrator")]

<PageTitle>Home</PageTitle>

<Toast></Toast>
<Modal></Modal>

<div class="container-fluid full-height">
    <div class="row h-100">
        <div class="col-xl-3 h-100">
            <ul class="nav nav-tabs mb-2">
                <TabItem MenuItem="Medier" ActiveTab="@activeTab" SelectTab="SelectTab" />
                <TabItem MenuItem="Aktive rækkefølger" ActiveTab="@activeTab" SelectTab="SelectTab" />
                <TabItem MenuItem="Skabeloner" ActiveTab="@activeTab" SelectTab="SelectTab" />
            </ul>
            <div class="tab-content">
                <div class="tab-pane @(activeTab == "Skabeloner" ? "show active" : "fade")">
                    <div class="card card-height-100 mb-2">

                        <div class="card-body">
                            <h5 class="card-title">Templates</h5>
                            <TemplatesTable Templates="AllTemplates" />
                        </div>
                    </div>
                </div>
                <div class="tab-pane @(activeTab == "Medier" ? "show active" : "fade")">
                    <div class="card card-height-100 mb-2">

                        <div class="card-body">
                            <h5 class="card-title">Media browser</h5>
                            <p class="card-text">Browser medier der er tilknyttet aktive rækkefølger</p>
                        </div>
                    </div>
                </div>
                <div class="tab-pane @(activeTab == "Aktive rækkefølger" ? "show active" : "fade")">
                    <div class="card card-height-100 mb-2">
                        <div class="card-body">
                            <div class="d-flex justify-content-between mb-3">
                                <h5 class="card-title text-muted">Aktive rækkefølger</h5>
                                <button class="btn btn-sm btn-danger" @onclick="ShowCreateNewRundownForm">Opret ny</button>
                            </div>
                            <hr />
                            <Calendar ReturnSelectedDate="SetSelectedDate" />
                            <hr />
                            <RundownTable OpenRundown="OpenRundown" Rundowns="ActiveRundowns" SelectedDate="SelectedDate" />
                        </div>
                    </div>
                </div>
            </div>
        </div>
        @* rundown card *@
        <div class="col-xl-9">
            <div class="row">
                <div class="col-xl-10">
                    <Rundown ControlRooms="controlRooms" OpenModal="ShowRundownItemForm" UpdateRundownList="UpdateRundownListOnControlRoomChange" UpdateSelectedRundown="UpdateSelectedRundown" />

                </div>

                <div class="col-xl-2 pt-1">
                    <div class="card card-height-100 mt-5">
                        <AdvancedClock />
                        <div class="card-body overflow-auto">
                            <ul>
                                @foreach (var log in InMemoryLogger.GetSimpleLogs().Reverse())
                                {
                                    <li><small>@((MarkupString)log)</small></li>
                                }
                            </ul>

                        </div>

                    </div>
                </div>
            </div>
        </div>
    </div>
</div>



@code {

    public DateTime SelectedDate = DateTime.Now.ToLocalTime();
    private string activeTab = "Aktive rækkefølger";

    //private RundownDTO selectedRundown = new();
    private List<ControlRoomDTO> controlRooms = new();
    private List<RundownDTO> AllRundowns = new();
    private List<RundownDTO> ActiveRundowns = new();
    private List<TemplateDTO> AllTemplates = new();

    protected override async Task OnInitializedAsync()
    {
        controlRooms = await ControlRoomService.GetControlRoomsAsync();
        AllTemplates = await TemplateService.GetAllTemplatesAsync();
        await GetAndFilterRundowns();

        SharedStates.OnChange += HandleSharedStateChange;

    }

    private async void HandleSharedStateChange(SharedStates.StateAction action)
    {
        if (action == SharedStates.StateAction.NewRundownAdded || action == SharedStates.StateAction.RundownUpdated)
        {
            await GetAndFilterRundowns();
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task GetAndFilterRundowns()
    {
        AllRundowns = await RundownService.GetRundownsAsync();
        ActiveRundowns = AllRundowns.Where(r => r.ArchivedDate == null).ToList();
    }

    private async Task UpdateRundownListOnControlRoomChange()
    {
        await GetAndFilterRundowns();
        await UpdateSelectedRundown();
        StateHasChanged();
    }

    private async Task UpdateSelectedRundown()
    {
        var selectedRundown = await RundownService.GetRundownAsync(RundownState.Rundown.UUID.ToString());
        RundownState.SelectedRundown(selectedRundown);
        StateHasChanged();
    }


    private async Task OpenRundown(string uuid)
    {
        try
        {
            var selectedRundown = await RundownService.GetRundownAsync(uuid);
            RundownState.SelectedRundown(selectedRundown);
            StateHasChanged();
        }
        catch (HttpRequestException e)
        {
            Console.WriteLine($"Error fetching rundown: {e.Message}");
        }
        activeTab = "Aktive rækkefølger";
    }

    /// <summary>
    /// Sætter og åbner den aktive tabpane ved klik på tab
    /// </summary>
    /// <param name="tabName"></param>
    private void SelectTab(string tabName)
    {
        activeTab = tabName;
    }

    private void SetSelectedDate(DateTime date)
    {
        SelectedDate = date.ToLocalTime();
    }

    List<string> Templates = ["Template1", "Template2", "Template3"];
    /// <summary>
    /// Kalder rending af Modal med RundownItemForm
    /// </summary>
    private void ShowRundownItemForm()
    {
        var content = new RenderFragment(builder =>
        {
            builder.AddContent(0, FormRenderservice.RenderRundownItemForm(
            Templates,
            RundownState.Rundown,
            EventCallback.Factory.Create<RundownDTO>(this, HandleRundownItemCreated)
        ));
        });

        ModalState.SetContent(content, "Opret ny historie");

    }
    ///<summary>
    /// Kalder rending af Modal med CreateNewRundownForm
    /// </summary>
    private void ShowCreateNewRundownForm()
    {
        var content = new RenderFragment(builder =>
        {
            builder.AddContent(0, FormRenderservice.RenderNewRundownForm(
                AllTemplates,
                controlRooms,
                SelectedDate,
                EventCallback.Factory.Create<CreateRundownResultDTO>(this, HandleRundownCreated)
            ));
        });

        ModalState.SetContent(content, "Opret ny rækkefølge");

    }

    /// <summary>
    /// Sætter values efter gem rundownItem og lukker modal
    /// </summary>
    private void HandleRundownItemCreated(RundownDTO result)
    {
        RundownState.SelectedRundown(result);
        ModalState.Close();
    }
    /// <summary>
    /// Sætter values efter gem Rundown og lukker modal
    /// </summary>
    private void HandleRundownCreated(CreateRundownResultDTO result)
    {
        //ActiveRundowns = result.ActiveRundowns;
        RundownState.SelectedRundown(result.SelectedRundown);
        ModalState.Close();
    }

    public void Dispose()
    {
        // Fjern abonnementet for at undgå memory leaks
        SharedStates.OnChange -= HandleSharedStateChange;
    }

}



