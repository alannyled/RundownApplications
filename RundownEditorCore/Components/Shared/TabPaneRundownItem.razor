@inject ModalState ModalState
@inject RundownState RundownState
@inject FormRenderService FormRenderservice
@inject IKafkaService KafkaService
@inject IMessageBuilderService MessageBuilderService
@inject SharedStates SharedStates

<div class="tab-pane @(ActiveTab == Name ? "show active" : "fade")">
    <div class="card card-height-100 mb-2">
        <div class="card-header d-flex justify-content-between bg-danger text-white">
            <h5 class="mb-0">@Name</h5>
            <h5 class="mb-0" role="button" @onclick="RemoveTabPane"><i class="bi bi-x-square"></i></h5>
        </div>

        <div class="card-header">
            <div class="d-flex">
                @* <button role="button" class="btn btn-sm btn-outline-danger py-0 me-1 fs-5" @onclick='() => AddSelected("Kamera")'><i class="bi bi-camera-video"></i></button> *@
                <button role="button" class="btn btn-sm btn-outline-danger py-0 me-1 fs-5" @onclick='() => AddSelected("Teleprompter")'><i class="bi bi-card-text"></i></button>
                <button role="button" class="btn btn-sm btn-outline-danger py-0 me-1 fs-5" @onclick='() => AddSelected("Grafik")'><i class="bi bi-palette"></i></button>
                <button role="button" class="btn btn-sm btn-outline-danger py-0 me-1 fs-5" @onclick='() => AddSelected("Video")'><i class="bi bi-film"></i></button>
                <button role="button" class="btn btn-sm btn-outline-danger py-0 me-1 fs-5" @onclick='() => AddSelected("Voiceover")'><i class="bi bi-badge-vo"></i></button>
                <button role="button" class="btn btn-sm btn-outline-danger py-0 me-1 fs-5" @onclick='() => AddSelected("Kommentar")'><i class="bi bi-chat-right-text"></i></button>
            </div>
        </div>

        <div class="card-body">
            @foreach (DetailDTO detail in RundownItem.Details)
            {
                <ItemDetail Detail="detail"></ItemDetail>
            }
        </div>
    </div>
</div>

@code {
    [Parameter]
    public string ActiveTab { get; set; } = string.Empty;
    [Parameter]
    public string Name { get; set; } = string.Empty;
    [Parameter]
    public string ItemId { get; set; }
    [Parameter]
    public EventCallback<string> OnRemove { get; set; }

    public RundownItemDTO? RundownItem { get; set; } = new();

    protected override void OnInitialized()
    {
        Guid UUID = Guid.Parse(ItemId);
        RundownItem = RundownState.Rundown.Items.FirstOrDefault(item => item.UUID == UUID);
        SharedStates.OnChange += HandleSharedStateChange;
    }
    /// <summary>
    /// Håndterer ændringer i SharedStates forårsaget af Kafka beskeder
    /// Hvis det påvirker det aktuelle RundownItem, opdateres det
    /// </summary>
    private void HandleSharedStateChange(SharedStates.StateAction action)
    {
        if (action == SharedStates.StateAction.ItemUpdated)
        {

            if (SharedStates.ItemUpdated.UUID == RundownItem.UUID)
            {
                RundownState.SelectedItem(SharedStates.ItemUpdated);
                RundownItem = RundownState.Item;
                InvokeAsync(StateHasChanged);
            }
        }
    }
    /// <summary>
    /// Kalder callback for at fjerne lukket items tabpane fra UI
    /// </summary>
    public async Task RemoveTabPane()
    {
        await OnRemove.InvokeAsync(ItemId);

    }
    /// <summary>
    /// Renderer formen til at oprette en ny detail og åbner modalen
    /// </summary>
    public void AddSelected(string type)
    {
        var content = new RenderFragment(builder =>
        {
            builder.AddContent(0, FormRenderservice.RenderItemDetailForm(
                type
            ));
        });

        ModalState.SetContent(content, $"Opret {type} element");
    }

    /// <summary>
    /// Fjerne abonnementet for at undgå memory leaks
    /// </summary>
    public void Dispose()
    {
        SharedStates.OnChange -= HandleSharedStateChange;
    }
}
