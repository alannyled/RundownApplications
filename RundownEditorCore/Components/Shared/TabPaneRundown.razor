@using RundownEditorCore.DTO

<div class="tab-pane @(ActiveTab == Name && !string.IsNullOrEmpty(ActiveTab) && !string.IsNullOrEmpty(Name) ? "show active" : "fade")">
    <div class="card card-height-100 mb-2">
        <div class="card-header d-flex justify-content-between bg-danger text-white">
            <h5 class="mb-0">@Name</h5>
            <h5 class="mb-0">@FormatDateWithCapitalDay(SelectedDate)</h5>
        </div>

        <div class="card-header">
            <div class="d-flex">
                <div class="col-auto me-3">
                    <select class="form-select form-select-sm">
                        <option>Kontrolrum</option>
                        <option value="1">PK1</option>
                        <option value="2">PK5</option>
                        <option value="3">PK6</option>
                        <option value="4">PK13</option>
                        <option value="5">PK14</option>
                    </select>
                </div>
                <button role="button" class="btn btn-sm btn-outline-danger py-0 me-1 fs-5" @onclick="() => ShowDialog.InvokeAsync()"><i class="bi bi-plus"></i></button>
              

            </div>
        </div>


        <div class="card-body">
            <table class="table table-hover table-bordered">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Duration</th>
                        <th>Category</th>
                    </tr>
                </thead>
                <tbody>
                @foreach (var child in CurrentObjects)
                {
                    <tr draggable="true"
                        @onclick="() => OpenTabPane.InvokeAsync(child.Name)"
                        @key="child.Id"
                        @ondragstart="(e) => OnDragStart(e, child.Id)"
                        @ondrop="(e) => OnDrop(e, child.Id)"
                        ondragover="allowDrop(event)"
                        ondragleave="leaveDrop(event)"
                        ondragend="endDrop(event)"
                        class="drag-item">
                        <td>@child.Name</td>
                            <td>@child.Duration.ToString("HH:mm:ss")</td>
                        <td>@child.Category</td>
                    </tr>
                }
                </tbody>
            </table>
        </div>

    </div>
</div>

@code {

    [Parameter]
    public EventCallback ShowDialog { get; set; }
    [Parameter]
    public EventCallback<string> OpenTabPane { get; set; }
    [Parameter]
    public string ActiveTab { get; set; } = string.Empty;
    [Parameter]
    public string Name { get; set; } = string.Empty;
    [Parameter]
    public List<RundownObjects> CurrentObjects { get; set; } = [];
    [Parameter]
    public DateTime SelectedDate { get; set; } = DateTime.Now;

    private string? draggedChildId;

    private string FormatDateWithCapitalDay(DateTime date)
    {
        var formattedDate = date.ToString("dddd d. MMMM yyyy", new System.Globalization.CultureInfo("da-DK"));
        return char.ToUpper(formattedDate[0]) + formattedDate.Substring(1);
    }

    private void OnDragStart(DragEventArgs e, string childId)
    {
        draggedChildId = childId;
    }

    private async Task OnDrop(DragEventArgs e, string targetChildId)
    {
        if (draggedChildId != null && draggedChildId != targetChildId) // Tjek at det ikke er droppet på sig selv
        {
            var draggedChild = CurrentObjects.FirstOrDefault(x => x.Id == draggedChildId);
            var targetChild = CurrentObjects.FirstOrDefault(x => x.Id == targetChildId);

            if (draggedChild != null && targetChild != null)
            {
                CurrentObjects.Remove(draggedChild);
                var targetIndex = CurrentObjects.IndexOf(targetChild);

                if (targetIndex >= 0)
                {
                    CurrentObjects.Insert(targetIndex, draggedChild);
                }
                await InvokeAsync(StateHasChanged);
            }
        }

        draggedChildId = null;
    }


}
