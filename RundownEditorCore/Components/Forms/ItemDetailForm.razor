@inject IRundownService RundownService

<form @onsubmit="HandleSubmit">
    <div class="mb-3">
        <label for="title" class="form-label">Titel</label>
        <input type="text" class="form-control form-control-sm" id="title" @bind="@Title" />
    </div>
    <div class="mb-3">
        <label for="duration" class="form-label">Planlagt længde</label>
        <input type="time" step="1" class="form-control form-control-sm" id="duration" @bind="@Duration" />
    </div>
    <div class="mb-3">
        <label for="category" class="form-label">Kamera</label>
        <select class="form-control form-control-sm" id="category" @bind="@Cameras">
            <option value="">Vælg Kamera</option>
            @foreach (var cam in Cameras)
            {
                <option value="@cam">@cam</option>
            }
        </select>
    </div>
    <div class="d-flex justify-content-end">
        <button type="submit" class="btn btn-sm btn-primary">Opret rækkefølge objekt</button>
    </div>
</form>

@code {
    // [Inject]
    // private IRundownService RundownService { get; set; }
    [Parameter]
    public string DetailType { get; set; } = string.Empty;
    [Parameter]
    public string Uuid { get; set; } = string.Empty;
    // [Parameter]
    // public RundownItemDTO SelectedRundownItem { get; set; }
    [Parameter]
    public EventCallback<RundownDTO> OnItemCreated { get; set; }

    public RundownDTO SelectedRundown { get; set; } = new();

    public TimeSpan Duration { get; set; } = new TimeSpan(0, 0, 0);

    public string Template { get; set; } = string.Empty;

    public List<string> Cameras { get; set; } = ["Kamera 1", "Kamera 2", "Kamera 3"];

    public ItemDetail? GetModel(string type) =>
    type switch
    {
        "video" => new ItemDetailDTO.ItemDetailVideo(),
        "text" => new ItemDetailDTO.ItemDetailTeleprompter(),
        "graphic" => new ItemDetailDTO.ItemDetailGraphic(),
        "comment" => new ItemDetailDTO.ItemDetailComment(),
        "voiceover" => new ItemDetailDTO.ItemDetailTeleprompter(),
        _ => null

    };


    private async Task HandleSubmit()
    {
        var newRundownItem = GetModel(DetailType);

        newRundownItem.UUID = Guid.NewGuid();
        newRundownItem.ItemId = Guid.Parse(Uuid);
        newRundownItem.Type = DetailType;

        // var newRundownItem = new ItemDetailDTO.ItemDetail
        //     {
        //         UUID = Guid.NewGuid(),
        //         ItemId = Guid.Parse(Uuid),
        //     Type = DetailType
        //        // Duration = Duration.ToString(),
        //        // Order = SelectedRundown.Items.Count // + 1  eller *10?
        //     };


        SelectedRundown = await RundownService.AddDetailToItemAsync(Uuid, newRundownItem);


        // var result = new CreateRundownItemResultDTO
        //     {
        //         SelectedRundown = updatedRundown
        //     };

        await OnItemCreated.InvokeAsync(SelectedRundown);
    }
}