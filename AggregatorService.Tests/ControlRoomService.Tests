using AggregatorService.Abstractions;
using AggregatorService.Services;
using Microsoft.Extensions.Caching.Memory;
using Microsoft.Extensions.Options;
using Moq;
using System;
using System.Net;
using System.Net.Http;
using System.Threading.Tasks;
using Xunit;

namespace AggregatorService.Tests
{
    public class ControlRoomServiceTests
    {
        private readonly Mock<HttpMessageHandler> _httpMessageHandlerMock;
        private readonly HttpClient _httpClient;
        private readonly Mock<IOptions<ApiUrls>> _apiUrlsMock;
        private readonly Mock<ICacheService> _cacheServiceMock;
        private readonly ControlRoomService _controlRoomService;

        public ControlRoomServiceTests()
        {
            _httpMessageHandlerMock = new Mock<HttpMessageHandler>();
            _httpClient = new HttpClient(_httpMessageHandlerMock.Object);
            _apiUrlsMock = new Mock<IOptions<ApiUrls>>();
            _cacheServiceMock = new Mock<ICacheService>();

            _apiUrlsMock.Setup(x => x.Value).Returns(new ApiUrls { ControlRoomApi = "https://fakeapi.com/controlroom" });

            _controlRoomService = new ControlRoomService(_httpClient, _apiUrlsMock.Object, _cacheServiceMock.Object);
        }

        [Fact]
        public async Task FetchData_ReturnsCachedData_WhenCacheIsNotEmpty()
        {
            // Arrange
            var cachedData = "cached control room data";
            _cacheServiceMock.Setup(x => x.GetDataAsync<string>(It.IsAny<string>())).ReturnsAsync(cachedData);

            // Act
            var result = await _controlRoomService.FetchData("https://fakeapi.com/controlroom");

            // Assert
            Assert.Equal(cachedData, result);
            _cacheServiceMock.Verify(x => x.GetDataAsync<string>(It.IsAny<string>()), Times.Once);
            _httpMessageHandlerMock.Protected().Verify("SendAsync", Times.Never(), ItExpr.IsAny<HttpRequestMessage>(), ItExpr.IsAny<CancellationToken>());
        }

        [Fact]
        public async Task FetchData_CallsApiAndCachesResult_WhenCacheIsEmpty()
        {
            // Arrange
            var apiResponse = "fresh control room data";
            _cacheServiceMock.Setup(x => x.GetDataAsync<string>(It.IsAny<string>())).ReturnsAsync((string)null);
            _httpMessageHandlerMock.Protected()
                .Setup<Task<HttpResponseMessage>>("SendAsync", ItExpr.IsAny<HttpRequestMessage>(), ItExpr.IsAny<CancellationToken>())
                .ReturnsAsync(new HttpResponseMessage
                {
                    StatusCode = HttpStatusCode.OK,
                    Content = new StringContent(apiResponse)
                });

            // Act
            var result = await _controlRoomService.FetchData("https://fakeapi.com/controlroom");

            // Assert
            Assert.Equal(apiResponse, result);
            _cacheServiceMock.Verify(x => x.SetData(It.IsAny<string>(), apiResponse, It.IsAny<TimeSpan>()), Times.Once);
        }

        [Fact]
        public async Task PostAsJsonAsync_UpdatesCacheAfterSuccess()
        {
            // Arrange
            var payload = new { Name = "Control Room 1" };
            _httpMessageHandlerMock.Protected()
                .Setup<Task<HttpResponseMessage>>("SendAsync", ItExpr.IsAny<HttpRequestMessage>(), ItExpr.IsAny<CancellationToken>())
                .ReturnsAsync(new HttpResponseMessage { StatusCode = HttpStatusCode.OK });

            // Act
            var response = await _controlRoomService.PostAsJsonAsync("https://fakeapi.com/controlroom", payload);

            // Assert
            Assert.Equal(HttpStatusCode.OK, response.StatusCode);
            _cacheServiceMock.Verify(x => x.SetData(It.IsAny<string>(), It.IsAny<string>(), It.IsAny<TimeSpan>()), Times.Once);
        }

        [Fact]
        public async Task PutAsJsonAsync_UpdatesCacheAfterSuccess()
        {
            // Arrange
            var payload = new { Name = "Updated Control Room" };
            _httpMessageHandlerMock.Protected()
                .Setup<Task<HttpResponseMessage>>("SendAsync", ItExpr.IsAny<HttpRequestMessage>(), ItExpr.IsAny<CancellationToken>())
                .ReturnsAsync(new HttpResponseMessage { StatusCode = HttpStatusCode.OK });

            // Act
            var response = await _controlRoomService.PutAsJsonAsync("https://fakeapi.com/controlroom", payload);

            // Assert
            Assert.Equal(HttpStatusCode.OK, response.StatusCode);
            _cacheServiceMock.Verify(x => x.SetData(It.IsAny<string>(), It.IsAny<string>(), It.IsAny<TimeSpan>()), Times.Once);
        }

        [Fact]
        public async Task DeleteAsync_UpdatesCacheAfterSuccess()
        {
            // Arrange
            _httpMessageHandlerMock.Protected()
                .Setup<Task<HttpResponseMessage>>("SendAsync", ItExpr.IsAny<HttpRequestMessage>(), ItExpr.IsAny<CancellationToken>())
                .ReturnsAsync(new HttpResponseMessage { StatusCode = HttpStatusCode.OK });

            // Act
            var response = await _controlRoomService.DeleteAsync("https://fakeapi.com/controlroom");

            // Assert
            Assert.Equal(HttpStatusCode.OK, response.StatusCode);
            _cacheServiceMock.Verify(x => x.SetData(It.IsAny<string>(), It.IsAny<string>(), It.IsAny<TimeSpan>()), Times.Once);
        }
    }
}