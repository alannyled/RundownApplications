@using Newtonsoft.Json;
@inject IRundownService RundownService
@inject RundownState RundownState
@inject ToastState ToastState
@inject ModalState ModalState

@if (isCreating)
{
    <div class="d-flex justify-content-center my-5">
        <div class="spinner-border text-danger" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
    <p class="text-center my-5">Opretter @Title</p>
}
else
{
<form @onsubmit="HandleSubmit">
    <div class="mb-3">
        <label for="title" class="form-label">Titel</label>
        <input type="text" class="form-control form-control-sm" id="title" @bind="@Title" />
    </div>
    @if (new string[] { "Teleprompter", "Voiceover", "Kommentar" }.Contains(DetailType))
    {
        <div class="mb-3">
            <label for="text" class="form-label">@DetailType tekst</label>
            <textarea class="form-control form-control-sm" id="text" rows="3" @bind="@Text"></textarea>
        </div>
    }
    @if (DetailType == "Grafik")
    {
        <div class="mb-3">
            <label for="path" class="form-label">Grafik</label>
            <input type="file" class="form-control form-control-sm" id="title" @bind="@Graphic" />
        </div>
    }
    @if (DetailType == "Teleprompter")
    {
        <div class="mb-3">
            <label for="category" class="form-label">Kamera</label>
            <select class="form-control form-control-sm" id="category" @bind="@SelectedCamera">
                <option value="">Vælg Kamera</option>
                @foreach (var cam in Cameras)
                {
                    <option value="@cam">@cam</option>
                }
            </select>
        </div>
    }
    <div class="mb-3">
        <label for="duration" class="form-label">Planlagt længde</label>
        <input type="time" step="1" class="form-control form-control-sm" id="duration" @bind="@Duration" />
    </div>

    <div class="d-flex justify-content-end">
        <button type="submit" class="btn btn-sm btn-primary">Opret rækkefølge objekt</button>
    </div>
</form>
}

@code {
    [Parameter]
    public string DetailType { get; set; } = string.Empty;

    public TimeOnly Duration { get; set; } = new TimeOnly(0, 0, 0);
    public string Title { get; set; } = string.Empty;
    public string Text { get; set; } = string.Empty;
    public string Graphic { get; set; } = string.Empty;
    public string Template { get; set; } = string.Empty;
    public string SelectedCamera { get; set; } = string.Empty;
    public List<string> Cameras { get; set; } = ["Kamera 1", "Kamera 2", "Kamera 3"]; // skal komme fra controlRoom.Hardware
    public bool isCreating { get; set; } = false;


    public ItemDetailDTO.ItemDetail? GetModel(string type) =>
    type switch
    {
        "Video" => new ItemDetailDTO.ItemDetailVideo(),
        "Teleprompter" => new ItemDetailDTO.ItemDetailTeleprompter(),
        "Grafik" => new ItemDetailDTO.ItemDetailGraphic(),
        "Kommentar" => new ItemDetailDTO.ItemDetailComment(),
        "Voiceover" => new ItemDetailDTO.ItemDetailTeleprompter(),
        _ => null

    };

    private bool ValidateInput()
    {
        if (string.IsNullOrEmpty(Title))
        {
            ToastState.FireToast("Du skal angive en titel", "text-bg-warning");
            return false;
        }
        return true;
    }


    private async Task HandleSubmit()
    {
        if (!ValidateInput())
        {
            return;
        }
        isCreating = true;
        var newRundownItem = GetModel(DetailType);

        newRundownItem.UUID = Guid.NewGuid();
        newRundownItem.ItemId = RundownState.Item.UUID;
        newRundownItem.Type = DetailType;
        newRundownItem.Title = Title;
        newRundownItem.Duration = Duration.ToString("HH:mm:ss");
        switch (newRundownItem)
        {
            case ItemDetailDTO.ItemDetailTeleprompter teleprompterItem:
                teleprompterItem.PrompterText = Text;
                break;
            case ItemDetailDTO.ItemDetailVideo videoItem:
                videoItem.VideoPath = "No video related";
                break;
            case ItemDetailDTO.ItemDetailGraphic graphicItem:
                graphicItem.GraphicId = "Graphic ID";
                break;
            case ItemDetailDTO.ItemDetailComment commentItem:
                commentItem.Comment = Text;
                break;
        }
        bool success = await SaveNewDetail(newRundownItem);
        isCreating = false;
        if (success) ModalState.Close();        
    }

    private async Task<bool> SaveNewDetail(ItemDetailDTO.ItemDetail newRundownItem)
    {
        await Task.Delay(1500); // Simulere at der går lidt tid før det er oprettet
        var rundown = await RundownService.AddDetailToItemAsync(RundownState.Rundown.UUID, newRundownItem);
        if (rundown == null)
        {
            ToastState.FireToast("Der skete en fejl. Prøv igen", "text-bg-danger");
            return false;
        }        
        ToastState.FireToast($"{Title} er oprettet.", "text-bg-success");
        return true;
    }
}