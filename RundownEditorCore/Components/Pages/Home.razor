@page "/"
@using System.Text.Json;
@using RundownEditorCore.Components.Shared
@using RundownEditorCore.DTO
@using RundownEditorCore.Interfaces
@using RundownEditorCore.Data
@inject IRundownService RundownService
@inject IControlRoomService ControlRoomService
@inject ITemplateService TemplateService
@inject IHttpClientFactory ClientFactory
@using Microsoft.AspNetCore.Authorization
@* @using Microsoft.AspNetCore.Identity
@using System.Security.Claims
@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider

@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider *@

@attribute [Authorize(Roles = "User,Administrator")]

<PageTitle>Home</PageTitle>


@if (!string.IsNullOrEmpty(validationMessage))
{
    <div class="container">
    <div class="alert alert-warning alert-dismissible">
        @validationMessage
        <button type="button" class="btn-close" @onclick="CloseAlert" aria-label="Luk"></button>
    </div>
    </div>
}
<Modal ShowDialog="@showDialog"
       SaveChanges="SaveCurrentObject"
       ShowDialogChanged="@((value) => showDialog = value)"
       Title="Dynamisk Indhold">
    @CurrentContent
</Modal>

<div class="container-fluid full-height">
    <div class="row h-100">
        <div class="col-xl-3 h-100">
            <ul class="nav nav-tabs mb-2">
                <TabItem MenuItem="Media" ActiveTab="@activeTab" SelectTab="SelectTab" />
                <TabItem MenuItem="Rundowns" ActiveTab="@activeTab" SelectTab="SelectTab" />                
                <TabItem MenuItem="Templates" ActiveTab="@activeTab" SelectTab="SelectTab" />
            </ul>
            <div class="tab-content">
                <div class="tab-pane @(activeTab == "Templates" ? "show active" : "fade")">
                    <div class="card card-height-100 mb-2">

                        <div class="card-body">
                            <h5 class="card-title">Templates</h5>
                            <Calendar ReturnSelectedDate="SetSelectedDate" />
                            <hr />
                            <TemplatesTable Templates="AllTemplates" OnTemplateSelect="CreateRundownFromTemplate"/>
                        </div>
                    </div>
                </div>
                <div class="tab-pane @(activeTab == "Media" ? "show active" : "fade")">
                    <div class="card card-height-100 mb-2">

                        <div class="card-body">
                            <h5 class="card-title">Media browser</h5>
                            <p class="card-text">Browser medier der er tilknyttet aktive rækkefølger</p>
                        </div>
                    </div>
                </div>
                <div class="tab-pane @(activeTab == "Rundowns" ? "show active" : "fade")">
                    <div class="card card-height-100 mb-2">
                        <div class="card-body">    
                            <div class="d-flex justify-content-between mb-3">
                            <h5 class="card-title text-muted">Aktive rækkefølger</h5>
                            <button class="btn btn-sm btn-primary" @onclick="ShowFormTwo">Opret ny</button>
                            </div>
                            <RundownTable OpenRundown="OpenRundown" Rundowns="ActiveRundowns" />
                        </div>
                    </div>
                </div>
            </div>
        </div>
        @* rundown card *@
        <div class="col-xl-8">
            <Rundown SelectedRundown="selectedRundown" ControlRooms="controlRooms" OpenModal="ShowRundownItemForm" UpdateRundownList="UpdateRundownListOnControlRoomChange" UpdateSelectedRundown="UpdateSelectedRundown" />

        </div>

        <div class="col-xl-1 pt-1">
            <div class="card card-height-100 mt-5">
                <AdvancedClock />
                <div class="card-body">
                    
                </div>

            </div>
        </div>
    </div>
</div>



@code {
    //private string? teleprompterText { get; set; }
    // modal indohold
    private bool showDialog = false;
    private string? validationMessage;
    private RenderFragment? CurrentContent { get; set; }
    private Func<Task>? currentSaveAction;


    private DateTime SelectedDate = DateTime.Now;   
    private string activeTab = "Rundowns";

    private RundownDTO selectedRundown = new();
    private List<ControlRoomDTO> controlRooms = new ();
    private List<RundownDTO> ActiveRundowns = new();
    private List<TemplateDTO> AllTemplates = new();

    protected override async Task OnInitializedAsync()
    {
        controlRooms = await ControlRoomService.GetControlRoomsAsync();
        ActiveRundowns = await RundownService.GetActiveRundowsAsync();
        AllTemplates = await TemplateService.GetAllTemplatesAsync();
    }

    private async Task CreateRundownFromTemplate(string uuid)
    {
        await RundownService.CreateRundownFromTemplate(uuid, SelectedDate);
    }

    private async Task UpdateRundownListOnControlRoomChange()
    {
        ActiveRundowns = await RundownService.GetActiveRundowsAsync();
        StateHasChanged();
    }

    private async Task UpdateSelectedRundown()
    {
        selectedRundown = await RundownService.GetRundownAsync(selectedRundown.Uuid.ToString());
        StateHasChanged();
    }

    private void CloseAlert()
    {
        validationMessage = string.Empty;
    }

    private async Task OpenRundown(string uuid)
    {
        try
        {
            selectedRundown = await RundownService.GetRundownAsync(uuid);
            StateHasChanged();
        }
        catch (HttpRequestException e)
        {
            Console.WriteLine($"Error fetching rundown: {e.Message}");
        }
        activeTab = "Rundowns";
    }

    private void SelectTab(string tabName)
    {
        activeTab = tabName;
    }

    private void SetSelectedDate(DateTime date)
    {
        SelectedDate = date;
    }

    private void ShowRundownItemForm()
    {
        CurrentContent = RundownItemFormContent;
        currentSaveAction = SaveRundownItemForm;
        validationMessage = string.Empty;
        showDialog = true;

    }
    private void ShowFormTwo()
    {
        CurrentContent = FormTwoContent;
        currentSaveAction = SaveFormTwo;
        validationMessage = string.Empty;
        showDialog = true;
    }

    // modal variabler til form
    private string ItemName { get; set; } = string.Empty;
    private string Duration { get; set; } = "00:00:00";
    private string Category { get; set; } = string.Empty;

    private RenderFragment RundownItemFormContent => builder =>
    {
        builder.OpenComponent(0, typeof(RundownObjectForm));
        builder.AddAttribute(1, "ItemName", ItemName);
        builder.AddAttribute(2, "Duration", Duration);
        builder.AddAttribute(3, "Category", Category);
        //builder.AddAttribute(4, "Categories", Categories);
        builder.AddAttribute(5, "ObjectNameChanged", EventCallback.Factory.Create<string>(this, value => ItemName = value));
        builder.AddAttribute(6, "DurationChanged", EventCallback.Factory.Create<string>(this, value => Duration = value));
        builder.AddAttribute(7, "CategoryChanged", EventCallback.Factory.Create<string>(this, value => Category = value));
        builder.CloseComponent();
    };

    private RenderFragment FormTwoContent => builder =>
    {
        builder.OpenElement(0, "div");
        builder.AddContent(1, "Dette er indholdet for Form 2");
        builder.CloseElement();
    };

    /// <summary>
    /// Ved klik på Modal save button, vækkes den aktuelle metode
    /// </summary>
    private void SaveCurrentObject()
    {
        currentSaveAction?.Invoke();
        StateHasChanged();        
    }
    private async Task SaveRundownItemForm()
    {

        if (string.IsNullOrEmpty(ItemName))
        {
            validationMessage = "Navnet må ikke være tomt.";
            return;
        }

        var newRundownItem = new RundownItemDTO
            {
                UUID = Guid.NewGuid(),
                RundownId = selectedRundown.Uuid,
                Name = ItemName,
                Duration = Duration,
                Order = selectedRundown.Items.Count // + 1  eller *10?
            };

        await RundownService.AddItemToRundownAsync(selectedRundown.Uuid.ToString(), newRundownItem);
        // kan denne ikke komme som svar på ovenstående, i stedet for at kalde igen
        await UpdateSelectedRundown();

        // nulstil alle felter
        ItemName = string.Empty;
        Duration = "00:00:00";
        Category = string.Empty;
        validationMessage = string.Empty;
        showDialog = false;
        
    }

    private async Task SaveFormTwo()
    {
        showDialog = false;
       
    }


    

    // private ClaimsPrincipal user;
    // private ApplicationUser currentUser;
    // private List<string> userRoles = new List<string>();

    // protected override async Task OnInitializedAsync()
    // {
    //     var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
    //     user = authState.User;

    //     if (user.Identity != null && user.Identity.IsAuthenticated)
    //     {
    //         currentUser = await UserManager.GetUserAsync(user);

    //         // Hent rollerne for den aktuelle bruger
    //         userRoles = (await UserManager.GetRolesAsync(currentUser)).ToList();
    //     }
    // }

}



