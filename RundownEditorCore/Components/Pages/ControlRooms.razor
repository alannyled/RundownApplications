@page "/controlrooms"
@using Microsoft.AspNetCore.Authorization
@using RundownEditorCore.DTO
@using RundownEditorCore.Services
@using RundownEditorCore.Components.Forms
@inject ControlRoomService ControlRoomService
@inject HardwareService HardwareService

@attribute [Authorize(Roles = "Administrator")]
<PageTitle>Kontrolrum</PageTitle>
<div class="container">
    <h3>Kontrolrum og Hardware</h3>
    <div class="row mt-2">
        <div class="col-4">

            <CreateControlRoomForm ControlRoom="newControlRoom" OnValidSubmit="CreateControlRoomAsync" />


            @if (editingControlRoom != null)
            {
                <EditControlRoomForm ControlRoom="editingControlRoom"
                                     OnDelete="DeleteControlRoom"
                                     OnValidSubmit="UpdateControlRoomAsync"
                                     OnCancel="CancelEdit" />

            }

            @if (addingHardwareToRoom != null)
            {
                <AddHardwareToControlRoomForm Hardware="newHardware"
                                              RoomName="@addingHardwareToRoom.Name"
                                              OnValidSubmit="CreateHardwareAsync"
                                              OnCancel="CancelEdit" />

            }

            @if (editingHardware != null)
            {
                <EditHardwareForm Hardware="editingHardware"
                                  OnDelete="DeleteHardware"
                                  OnValidSubmit="UpdateHardwareAsync"
                                  OnCancel="CancelEdit" />

            }

        </div>
        <div class="col-8">
            <div class="card mb-2">
                <div class="card-body">

                    <h5 class="card-title">Kontrolrum og Hardware</h5>
                    @if (controlRooms == null)
                    {
                        <p><em>Indlæser kontrolrum...</em></p>
                    }
                    else
                    {
                        <table class="table">
                            <thead>
                                <tr>
                                    <th>Navn</th>
                                    <th>Lokation</th>
                                    <th>Hardware</th>
                                    <th>Oprettet</th>
                                    <th>Handlinger</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var room in controlRooms)
                                {
                                    <tr>
                                        <td>@room.Name</td>
                                        <td>@room.Location</td>
                                        <td>
                                            <ul>
                                                @foreach (var hardware in room.HardwareItems)
                                                {
                                                    <li><a role="button" class="link-dark" @onclick="() => EditHardware(hardware.Uuid)">@hardware.Name (@hardware.Model)</a></li>
                                                }
                                            </ul>
                                        </td>
                                        <td>@room.CreatedDate.ToShortDateString()</td>
                                        <td>
                                            <button class="btn btn-sm btn-primary" @onclick="() => EditControlRoom(room.Uuid)">Rediger</button>
                                            <button class="btn btn-sm btn-primary" @onclick="() => AddHardware(room.Uuid)">Tilføj Hardware</button>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    }
                </div>
            </div>


        </div>
    </div>
</div>

@code {
    private List<ControlRoomDTO> controlRooms;
    private ControlRoomDTO newControlRoom = new ControlRoomDTO();
    private ControlRoomDTO editingControlRoom;
    private ControlRoomDTO addingHardwareToRoom;
    private HardwareDTO newHardware = new HardwareDTO();
    private HardwareDTO editingHardware;

    protected override async Task OnInitializedAsync()
    {
        controlRooms = await ControlRoomService.GetControlRoomsAsync();
    }

    private async Task CreateControlRoomAsync()
    {
        await ControlRoomService.CreateControlRoomAsync(newControlRoom);
        controlRooms = await ControlRoomService.GetControlRoomsAsync(); // Opdater listen efter oprettelse
        newControlRoom = new ControlRoomDTO(); // Nulstil formularen
    }

    private void EditControlRoom(string id)
    {
        CancelEdit();
        editingControlRoom = controlRooms.FirstOrDefault(room => room.Uuid == id);
    }

    private async Task UpdateControlRoomAsync()
    {
        await ControlRoomService.UpdateControlRoomAsync(editingControlRoom.Uuid, editingControlRoom);
        controlRooms = await ControlRoomService.GetControlRoomsAsync(); // Opdater listen efter opdatering
        editingControlRoom = null; // Luk redigeringsformularen
    }

    private void CancelEdit()
    {
        editingControlRoom = null;
        addingHardwareToRoom = null;
        editingHardware = null;
    }

    private async Task DeleteControlRoom(string id)
    {
        await ControlRoomService.DeleteControlRoomAsync(id);
        controlRooms = await ControlRoomService.GetControlRoomsAsync(); // Opdater listen efter sletning
    }

    private void AddHardware(string controlRoomId)
    {
        CancelEdit();
        addingHardwareToRoom = controlRooms.FirstOrDefault(room => room.Uuid == controlRoomId);
        newHardware = new HardwareDTO { ControlRoomId = controlRoomId };
    }

    private void EditHardware(string id)
    {
        CancelEdit();
        editingHardware = controlRooms.SelectMany(room => room.HardwareItems).FirstOrDefault(hardware => hardware.Uuid == id);
    }

    private async Task CreateHardwareAsync()
    {
        await HardwareService.AddHardwareAsync(newHardware);
        controlRooms = await ControlRoomService.GetControlRoomsAsync(); // Opdater listen efter oprettelse
        newHardware = new HardwareDTO(); // Nulstil hardwareformularen
        addingHardwareToRoom = null; // Luk hardwareformularen
    }

    private async Task UpdateHardwareAsync()
    {
        await HardwareService.UpdateHardwareAsync(editingHardware.Uuid, editingHardware);
        controlRooms = await ControlRoomService.GetControlRoomsAsync(); // Opdater listen efter opdatering
        editingHardware = null; // Luk hardwareformularen
    }

    private async Task DeleteHardware(string id)
    {
        await HardwareService.DeleteHardwareAsync(id);
        controlRooms = await ControlRoomService.GetControlRoomsAsync(); // Opdater listen efter sletning
        editingHardware = null; // Luk hardwareformularen
    }
}
