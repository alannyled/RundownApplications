
<div class="container text-center my-2">
    <div class="d-flex justify-content-between">
        <button class="btn btn-outline-danger btn-sm px-4" @onclick="GoToPreviousMonth"><i class="bi bi-caret-left-fill"></i></button>
        <h5 class="text-muted mb-0"><span class="full-day">@DisplayDate.ToString("MMMM yyyy")</span><span class="short-day">@DisplayDate.ToString("MM/yyyy")</span></h5>
        <button class="btn btn-outline-danger btn-sm px-4" @onclick="GoToNextMonth"><i class="bi bi-caret-right-fill"></i></button>
    </div>

    <div class="calendar-grid mt-3">
        <div class="day-header"><span class="full-day">Mandag</span><span class="short-day">Man</span></div>
        <div class="day-header"><span class="full-day">Tirsdag</span><span class="short-day">Tir</span></div>
        <div class="day-header"><span class="full-day">Onsdag</span><span class="short-day">Ons</span></div>
        <div class="day-header"><span class="full-day">Torsdag</span><span class="short-day">Tor</span></div>
        <div class="day-header"><span class="full-day">Fredag</span><span class="short-day">Fre</span></div>
        <div class="day-header"><span class="full-day">Lørdag</span><span class="short-day">Lør</span></div>
        <div class="day-header"><span class="full-day">Søndag</span><span class="short-day">Søn</span></div>


        @for (int i = 0; i < StartDayOfWeek; i++)
        {
            <div class="empty"></div>
        }

        @for (int day = 1; day <= DaysInMonth; day++)
        {
            int capturedDay = day;
            <div role="button"
                 class="day @(CurrentDate.Day == day && CurrentDate.Month == DisplayDate.Month && CurrentDate.Year == DisplayDate.Year ? "current-day" : "")"
                 @onclick="() => SetSelectedDate(capturedDay)">
                @day
            </div>
        }
    </div>
    <div class="mt-1">
        <button class="btn btn-outline-danger btn-sm px-4" @onclick="GoToToday">I dag</button>
    </div>
</div>

@code {
    [Parameter]
    public EventCallback<DateTime> ReturnSelectedDate { get; set; }
    private DateTime CurrentDate = DateTime.Now.ToLocalTime();
    private DateTime DisplayDate = DateTime.Now.ToLocalTime();
    private int DaysInMonth => DateTime.DaysInMonth(DisplayDate.Year, DisplayDate.Month);
    // fordi ugen starter med søndag, rykker jeg det hele en dag herunder
    private int StartDayOfWeek => ((int)new DateTime(DisplayDate.Year, DisplayDate.Month, 1).DayOfWeek + 6) % 7;

    private void GoToPreviousMonth()
    {
        DisplayDate = DisplayDate.AddMonths(-1);
    }

    private void GoToNextMonth()
    {
        DisplayDate = DisplayDate.AddMonths(1);
    }
    private void GoToToday()
    {
        DisplayDate = DateTime.Now;
        CurrentDate = DateTime.Now;
        ReturnSelectedDate.InvokeAsync(CurrentDate);
    }

    private void SetSelectedDate(int day)
    {
        CurrentDate = new DateTime(DisplayDate.Year, DisplayDate.Month, day);
        ReturnSelectedDate.InvokeAsync(CurrentDate);
    }


}

