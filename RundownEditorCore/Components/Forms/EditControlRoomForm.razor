@using RundownEditorCore.DTO

<div class="card mb-2">
    <div class="card-body">

        <h5 class="card-title">Rediger kontrolrum</h5>

        <EditForm Model="ControlRoom" OnValidSubmit="OnSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary class="alert alert-danger" />

            <div class="mb-3">
                <label for="name" class="form-label">Navn:</label>
                <InputText id="name" @bind-Value="ControlRoom.Name" class="form-control" placeholder="Indtast navn" />
            </div>

            <div class="mb-3">
                <label for="location" class="form-label">Lokation:</label>
                <InputText id="location" @bind-Value="ControlRoom.Location" class="form-control" placeholder="Indtast lokation" />
            </div>

            <div class="d-flex justify-content-end">
                <button class="btn btn-sm btn-danger ms-2" @onclick="() => OnDelete.InvokeAsync(ControlRoom.Uuid.ToString())">Slet</button>
                <button class="btn btn-sm btn-secondary ms-2" @onclick="OnCancel">Annuller</button>
                <button type="submit" class="btn btn-sm btn-primary ms-2">Gem ændringer</button>
            </div>
        </EditForm>
    </div>
</div>

@code {
    [Parameter]
    public ControlRoomDTO ControlRoom { get; set; } = new ControlRoomDTO();

    [Parameter]
    public EventCallback<string> OnDelete { get; set; }

    [Parameter]
    public EventCallback OnValidSubmit { get; set; }

    [Parameter]
    public EventCallback OnCancel { get; set; }

    private async Task OnSubmit()
    {
        if (OnValidSubmit.HasDelegate)
        {
            await OnValidSubmit.InvokeAsync();
        }
    }
}
