@page "/"

@inject IRundownService RundownService
@inject IControlRoomService ControlRoomService
@inject ITemplateService TemplateService
@inject IHttpClientFactory ClientFactory
@inject ILogger<TabPaneRundown> _logger
@inject FormRenderService FormRenderservice
@inject ModalState ModalState
@inject ToastState ToastState
@inject RundownState RundownState
@inject SharedStates SharedStates
@using Microsoft.AspNetCore.Authorization
@using CommonClassLibrary.DTO

@inject IKafkaService KafkaService
@inject IMessageBuilderService MessageBuilderService

@attribute [Authorize(Roles = "User,Administrator")]

<PageTitle>Home</PageTitle>

<Toast></Toast>
<Modal></Modal>

<div class="container-fluid full-height">
    <div class="row h-100">
        <div class="col-xl-3 h-100">
            <ul class="nav nav-tabs mb-2">
                <TabItem MenuItem="Medier" ActiveTab="@activeTab" SelectTab="SelectTab" />
                <TabItem MenuItem="Aktive rækkefølger" ActiveTab="@activeTab" SelectTab="SelectTab" />
                <TabItem MenuItem="Skabeloner" ActiveTab="@activeTab" SelectTab="SelectTab" />
            </ul>
            <div class="tab-content">
                <div class="tab-pane @(activeTab == "Skabeloner" ? "show active" : "fade")">
                    <div class="card card-height-100 mb-2">

                        <div class="card-body">
                            <h5 class="card-title">Skabeloner</h5>
                            <TemplatesTable Templates="SharedStates.Templates" />
                        </div>
                    </div>
                </div>
                <div class="tab-pane @(activeTab == "Medier" ? "show active" : "fade")">
                    <div class="card card-height-100 mb-2">

                        <div class="card-body">
                            <h5 class="card-title">Media browser</h5>
                            <p class="card-text">Browser medier der er tilknyttet aktive rækkefølger</p>
                        </div>
                    </div>
                </div>
                <div class="tab-pane @(activeTab == "Aktive rækkefølger" ? "show active" : "fade")">
                    <div class="card card-height-100 mb-2">
                        <div class="card-body">
                            <div class="d-flex justify-content-between mb-3">
                                <h5 class="card-title text-muted">Aktive rækkefølger</h5>
                                <button class="btn btn-sm btn-danger" @onclick="ShowCreateNewRundownForm">Opret ny</button>
                            </div>
                            <hr />
                            <Calendar ReturnSelectedDate="SetSelectedDate" />
                            <hr />
                            <RundownTable OpenRundown="OpenRundown" Rundowns="ActiveRundowns" SelectedDate="SelectedDate" />
                        </div>
                    </div>
                </div>
            </div>
        </div>
        @* rundown card *@
        <div class="col-xl-9">
            <div class="row">
                <div class="col">
                    <Rundown />
                </div>
                <div class="col-12 col-xl-auto pt-1">
                    <div class="card card-height-100 mt-5">
                        <AdvancedClock />
                        <SystemStatus />
                        <div class="card-body overflow-auto log-text">
                            <ul>
                                @foreach (var log in LogMessages.AsEnumerable().Reverse())
                                {
                                    <li><small><em class="@GetBgColor(log.LogLevel)">@log.TimeStamp.ToLongTimeString() @log.LogLevel:</em> @log.Message</small></li>
                                }
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>



@code {

    public DateTime SelectedDate = DateTime.Now.ToLocalTime();
    private string activeTab = "Aktive rækkefølger";
    private List<ControlRoomDTO> ControlRooms = new();
    private List<RundownDTO> AllRundowns = new();
    private List<RundownDTO> ActiveRundowns = new();
    private List<TemplateDTO> AllTemplates = new();
    private List<LogMessageDTO> LogMessages = new List<LogMessageDTO>();

    protected override async Task OnInitializedAsync()
    {

        if(SharedStates.ControlRooms.Count == 0)
        {
            ControlRooms = await ControlRoomService.GetControlRoomsAsync();
            SharedStates.SharedControlRoom(ControlRooms);
        }
        if(SharedStates.Templates.Count == 0)
        {
            AllTemplates = await TemplateService.GetAllTemplatesAsync();
            SharedStates.SharedTemplates(AllTemplates);
        }
        if(SharedStates.AllRundowns.Count == 0)
        {
            AllRundowns = await RundownService.GetRundownsAsync();
            SharedStates.SharedAllRundowns(AllRundowns);
        }
        await FilterActiveRundowns();

        SharedStates.OnChange += HandleSharedStateChange; 
        LogMessages = KafkaBackgroundService.RecentLogs.ToList();
        KafkaBackgroundService.LogMessageAdded += OnLogMessageAdded;

    }

    /// <summary>
    /// Tilføjer nye logs til listen
    /// </summary>
    private void OnLogMessageAdded(LogMessageDTO logMessage)
    {
        LogMessages.Add(logMessage);
        InvokeAsync(StateHasChanged); 
    }
    /// <summary>
    /// Håndtere ændringer i SharedStates forårsaget af Kafka beskeder
    /// og bestemte StateActions
    /// </summary>
    private async void HandleSharedStateChange(SharedStates.StateAction action)
    { 
        if (action == SharedStates.StateAction.ItemUpdated || 
            action == SharedStates.StateAction.AllRundownsUpdated)
        {
            await FilterActiveRundowns();
            await InvokeAsync(StateHasChanged);
        }

        if(action == SharedStates.StateAction.TemplatesUpdated)
        {
            AllTemplates = new List<TemplateDTO>(SharedStates.Templates);
            await InvokeAsync(StateHasChanged);
        }

        if (action == SharedStates.StateAction.Error)
        {
            string message = "";
            switch(SharedStates.Error.Action)
            {
                case "retry":
                    message = $"Data kunne ikke hentes {SharedStates.Error.Count}. gang.<br>Forsøger igen om {SharedStates.Error.Time} sekunder";
                    break;
                default:
                    message = "Der skete en alvorlig fejl. En eller flere services er ikke tilgængelige";
                    break;
            }
            await InvokeAsync(() =>
            {
                ToastState.FireToast(message, "text-bg-warning");
            });
        }
    }

    private string GetBgColor(LogLevel level)
    {
        return level switch
        {
            LogLevel.Information => "bg-primary-subtle", // Blå baggrund for info
            LogLevel.Warning => "bg-warning-subtle",      // Gul baggrund for warning
            LogLevel.Error => "bg-danger-subtle",        // Rød baggrund for error
            _ => ""
        };
    }

    /// <summary>
    /// Henter alle rundowns og filtrerer de deaktiverede fra
    /// </summary>
    private async Task FilterActiveRundowns()
    {
        var allRundowns = SharedStates.AllRundowns;
        ActiveRundowns = allRundowns.Where(r => r.ArchivedDate == null).ToList() ?? [];

        await InvokeAsync(StateHasChanged);
    }

    /// <summary>
    /// Åbner en rundown ved klik på listen med aktive rundowns
    /// </summary>
    private async Task OpenRundown(string uuid)
    {
        try
        {
            var selectedRundown = ActiveRundowns.FirstOrDefault(r => r.UUID == uuid);
            RundownState.SelectedRundown(selectedRundown);
            RundownState.SelectedItem(new RundownItemDTO());
            await InvokeAsync(StateHasChanged);
        }
        catch (HttpRequestException e)
        {
            Console.WriteLine($"Error finding rundown: {e.Message}");
        }
        activeTab = "Aktive rækkefølger";
    }

    /// <summary>
    /// Sætter og åbner den aktive tabpane ved klik på tab
    /// </summary>
    private void SelectTab(string tabName)
    {
        activeTab = tabName;
    }

    private void SetSelectedDate(DateTime date)
    {
        SelectedDate = date.ToLocalTime();
    }

    ///<summary>
    /// Kalder rendering af Modal med CreateNewRundownForm
    /// </summary>
    private void ShowCreateNewRundownForm()
    {
        var content = new RenderFragment(builder =>
        {
            builder.AddContent(0, FormRenderservice.RenderNewRundownForm(
                SelectedDate
            ));
        });

        ModalState.SetContent(content, "Opret ny rækkefølge");

    }
    /// <summary>
    /// Fjerner abonnementet for at undgå memory leaks
    /// </summary>
    public void Dispose()
    {
        SharedStates.OnChange -= HandleSharedStateChange;
        KafkaBackgroundService.LogMessageAdded -= OnLogMessageAdded;
    }

}



